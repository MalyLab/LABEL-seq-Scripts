{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import copy\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "from scipy import stats\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import print_function\n",
    "import os.path\n",
    "from collections import Counter\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from enrich2.variant import WILD_TYPE_VARIANT\n",
    "import enrich2.plots as enrich_plot\n",
    "\n",
    "from functools import reduce\n",
    "\n",
    "pd.set_option(\"display.max_rows\", 20) # rows shown when pretty-printing\n",
    "pd.set_option('display.max_columns', 100)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create barcode count dataframe: data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flag1</th>\n",
       "      <th>flag2</th>\n",
       "      <th>dmso1</th>\n",
       "      <th>dmso2</th>\n",
       "      <th>vem1</th>\n",
       "      <th>vem2</th>\n",
       "      <th>lxh1</th>\n",
       "      <th>lxh2</th>\n",
       "      <th>frequency</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>barcode</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>CCAAAGTGATCCGATA</th>\n",
       "      <td>98</td>\n",
       "      <td>95</td>\n",
       "      <td>30.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>0.000012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CCGTCTACTACATATT</th>\n",
       "      <td>40</td>\n",
       "      <td>29</td>\n",
       "      <td>42.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0.000006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TCTACCCGAATACACA</th>\n",
       "      <td>72</td>\n",
       "      <td>41</td>\n",
       "      <td>32.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>103.0</td>\n",
       "      <td>0.000008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CCTATTTCCGAAGCGC</th>\n",
       "      <td>40</td>\n",
       "      <td>31</td>\n",
       "      <td>22.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>0.000006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AATATTATCTCGAAGG</th>\n",
       "      <td>137</td>\n",
       "      <td>124</td>\n",
       "      <td>36.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>117.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>0.000016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ATAAAATGGTAATACT</th>\n",
       "      <td>54</td>\n",
       "      <td>70</td>\n",
       "      <td>22.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>0.000008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ATTAGCGACCCTAGAT</th>\n",
       "      <td>105</td>\n",
       "      <td>104</td>\n",
       "      <td>33.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>77.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>166.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>0.000014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GTTCCTAAGATGCCAA</th>\n",
       "      <td>51</td>\n",
       "      <td>30</td>\n",
       "      <td>15.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0.000005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TTATATAGAAAGTCGG</th>\n",
       "      <td>28</td>\n",
       "      <td>18</td>\n",
       "      <td>22.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>0.000004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AACAAACTTTATGATG</th>\n",
       "      <td>115</td>\n",
       "      <td>152</td>\n",
       "      <td>46.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>141.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>0.000017</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>68852 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  flag1  flag2  dmso1  dmso2  vem1  vem2   lxh1   lxh2  \\\n",
       "barcode                                                                  \n",
       "CCAAAGTGATCCGATA     98     95   30.0   38.0  62.0  61.0   59.0   88.0   \n",
       "CCGTCTACTACATATT     40     29   42.0   26.0  36.0  49.0   29.0   25.0   \n",
       "TCTACCCGAATACACA     72     41   32.0   43.0  51.0  41.0   55.0  103.0   \n",
       "CCTATTTCCGAAGCGC     40     31   22.0   41.0  35.0  37.0   54.0   44.0   \n",
       "AATATTATCTCGAAGG    137    124   36.0   62.0  83.0  98.0  117.0  124.0   \n",
       "...                 ...    ...    ...    ...   ...   ...    ...    ...   \n",
       "ATAAAATGGTAATACT     54     70   22.0   24.0  37.0  43.0   47.0   51.0   \n",
       "ATTAGCGACCCTAGAT    105    104   33.0   73.0  77.0  89.0  166.0   92.0   \n",
       "GTTCCTAAGATGCCAA     51     30   15.0   20.0  36.0  34.0   42.0   28.0   \n",
       "TTATATAGAAAGTCGG     28     18   22.0   14.0  14.0  26.0   51.0   49.0   \n",
       "AACAAACTTTATGATG    115    152   46.0   68.0  90.0  84.0  141.0  120.0   \n",
       "\n",
       "                  frequency  \n",
       "barcode                      \n",
       "CCAAAGTGATCCGATA   0.000012  \n",
       "CCGTCTACTACATATT   0.000006  \n",
       "TCTACCCGAATACACA   0.000008  \n",
       "CCTATTTCCGAAGCGC   0.000006  \n",
       "AATATTATCTCGAAGG   0.000016  \n",
       "...                     ...  \n",
       "ATAAAATGGTAATACT   0.000008  \n",
       "ATTAGCGACCCTAGAT   0.000014  \n",
       "GTTCCTAAGATGCCAA   0.000005  \n",
       "TTATATAGAAAGTCGG   0.000004  \n",
       "AACAAACTTTATGATG   0.000017  \n",
       "\n",
       "[68852 rows x 9 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Using data from PANDAseq paired then counted files, no further quality filtering\n",
    "\n",
    "#Read in count files, rename headers, set BC as index\n",
    "flag1 = pd.read_csv('/Users/jsimon/Documents/Lab/**RNABinderProject/SequencingRunFiles/SequencingRun_COSMIC2/PandasOutput/CRAF_TurboID/Count_Files/barcodes_E1.count.tsv', \n",
    "                    header=None,#specifies the file does not have headers\n",
    "                    delimiter=r\"\\s+\", #specifies a space-delimited file\n",
    "                   ).rename(columns={0: \"flag1\", 1: \"barcode\"}).set_index('barcode')\n",
    "\n",
    "flag2 = pd.read_csv('/Users/jsimon/Documents/Lab/**RNABinderProject/SequencingRunFiles/SequencingRun_COSMIC2/PandasOutput/CRAF_TurboID/Count_Files/barcodes_E2.count.tsv', \n",
    "                    header=None,#specifies the file does not have headers\n",
    "                    delimiter=r\"\\s+\", #specifies a space-delimited file\n",
    "                   ).rename(columns={0: \"flag2\", 1: \"barcode\"}).set_index('barcode')\n",
    "\n",
    "dmso1 = pd.read_csv('/Users/jsimon/Documents/Lab/**RNABinderProject/SequencingRunFiles/SequencingRun_COSMIC2/PandasOutput/CRAF_TurboID/Count_Files/barcodes_E3.count.tsv', \n",
    "                    header=None,#specifies the file does not have headers\n",
    "                    delimiter=r\"\\s+\", #specifies a space-delimited file\n",
    "                   ).rename(columns={0: \"dmso1\", 1: \"barcode\"}).set_index('barcode')\n",
    "\n",
    "dmso2 = pd.read_csv('/Users/jsimon/Documents/Lab/**RNABinderProject/SequencingRunFiles/SequencingRun_COSMIC2/PandasOutput/CRAF_TurboID/Count_Files/barcodes_E4.count.tsv', \n",
    "                    header=None,#specifies the file does not have headers\n",
    "                    delimiter=r\"\\s+\", #specifies a space-delimited file\n",
    "                   ).rename(columns={0: \"dmso2\", 1: \"barcode\"}).set_index('barcode')\n",
    "\n",
    "vem1 = pd.read_csv('/Users/jsimon/Documents/Lab/**RNABinderProject/SequencingRunFiles/SequencingRun_COSMIC2/PandasOutput/CRAF_TurboID/Count_Files/barcodes_F5.count.tsv', \n",
    "                    header=None,#specifies the file does not have headers\n",
    "                    delimiter=r\"\\s+\", #specifies a space-delimited file\n",
    "                   ).rename(columns={0: \"vem1\", 1: \"barcode\"}).set_index('barcode')\n",
    "\n",
    "vem2 = pd.read_csv('/Users/jsimon/Documents/Lab/**RNABinderProject/SequencingRunFiles/SequencingRun_COSMIC2/PandasOutput/CRAF_TurboID/Count_Files/barcodes_F6.count.tsv', \n",
    "                    header=None,#specifies the file does not have headers\n",
    "                    delimiter=r\"\\s+\", #specifies a space-delimited file\n",
    "                   ).rename(columns={0: \"vem2\", 1: \"barcode\"}).set_index('barcode')\n",
    "\n",
    "lxh1 = pd.read_csv('/Users/jsimon/Documents/Lab/**RNABinderProject/SequencingRunFiles/SequencingRun_COSMIC2/PandasOutput/CRAF_TurboID/Count_Files/barcodes_F1.count.tsv', \n",
    "                    header=None,#specifies the file does not have headers\n",
    "                    delimiter=r\"\\s+\", #specifies a space-delimited file\n",
    "                   ).rename(columns={0: \"lxh1\", 1: \"barcode\"}).set_index('barcode')\n",
    "\n",
    "lxh2 = pd.read_csv('/Users/jsimon/Documents/Lab/**RNABinderProject/SequencingRunFiles/SequencingRun_COSMIC2/PandasOutput/CRAF_TurboID/Count_Files/barcodes_F2.count.tsv', \n",
    "                    header=None,#specifies the file does not have headers\n",
    "                    delimiter=r\"\\s+\", #specifies a space-delimited file\n",
    "                   ).rename(columns={0: \"lxh2\", 1: \"barcode\"}).set_index('barcode')\n",
    "\n",
    "#merge counts into single dataframe.\n",
    "data = flag1.merge(flag2, how='inner', left_index=True, right_index=True) #only keep barcodes that are observed in BOTH\n",
    "\n",
    "dataframes = [dmso1, dmso2, vem1, vem2, lxh1, lxh2]\n",
    "data_strept_only = reduce(lambda  left,right: pd.merge(left,right, left_index=True, right_index=True, how='outer'), \n",
    "                        dataframes) #Use 'outer' such that ALL barcode counts are observed, even if only observed in a single enrichment\n",
    "\n",
    "data = data.merge(data_strept_only, how='inner', \n",
    "                  left_index=True, right_index=True) #Use 'inner' such that only barcodes that appear in flag DF and at least once in pERK dataframe are included\n",
    "\n",
    "#Filter so only barcodes with flag counts of 10+ are considered. Filters out sequencing errors.\n",
    "data = data[(data['flag1']>9) & (data['flag2']>9)]\n",
    "data = data[(data['dmso1']>9) & (data['dmso2']>9)]\n",
    "\n",
    "#Calculate barcode frequency\n",
    "data['frequency'] = (data['flag1'] + data['flag2'] + data['dmso1'] + data['dmso2'])/(data['flag1'].sum() + data['flag2'].sum() + data['dmso1'].sum() + data['dmso2'].sum())\n",
    "\n",
    "data = data[data['frequency']>0.000003]\n",
    "\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AA Variant</th>\n",
       "      <th>flag1</th>\n",
       "      <th>flag2</th>\n",
       "      <th>dmso1</th>\n",
       "      <th>dmso2</th>\n",
       "      <th>vem1</th>\n",
       "      <th>vem2</th>\n",
       "      <th>lxh1</th>\n",
       "      <th>lxh2</th>\n",
       "      <th>frequency</th>\n",
       "      <th>dmso1 score</th>\n",
       "      <th>dmso2 score</th>\n",
       "      <th>vem1 score</th>\n",
       "      <th>vem2 score</th>\n",
       "      <th>lxh1 score</th>\n",
       "      <th>lxh2 score</th>\n",
       "      <th>Averge Flag</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>TCGGACTTCTGTCTCA</th>\n",
       "      <td>_wt</td>\n",
       "      <td>48</td>\n",
       "      <td>59</td>\n",
       "      <td>23.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>0.000007</td>\n",
       "      <td>0.479167</td>\n",
       "      <td>0.423729</td>\n",
       "      <td>0.625000</td>\n",
       "      <td>0.728814</td>\n",
       "      <td>0.687500</td>\n",
       "      <td>1.423729</td>\n",
       "      <td>53.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TACCACCTGGTCAGAT</th>\n",
       "      <td>_wt</td>\n",
       "      <td>215</td>\n",
       "      <td>218</td>\n",
       "      <td>113.0</td>\n",
       "      <td>149.0</td>\n",
       "      <td>233.0</td>\n",
       "      <td>227.0</td>\n",
       "      <td>262.0</td>\n",
       "      <td>268.0</td>\n",
       "      <td>0.000031</td>\n",
       "      <td>0.525581</td>\n",
       "      <td>0.683486</td>\n",
       "      <td>1.083721</td>\n",
       "      <td>1.041284</td>\n",
       "      <td>1.218605</td>\n",
       "      <td>1.229358</td>\n",
       "      <td>216.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CGCGCGCTAAGCAAAG</th>\n",
       "      <td>_wt</td>\n",
       "      <td>52</td>\n",
       "      <td>44</td>\n",
       "      <td>15.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>0.000006</td>\n",
       "      <td>0.288462</td>\n",
       "      <td>0.477273</td>\n",
       "      <td>0.596154</td>\n",
       "      <td>1.363636</td>\n",
       "      <td>1.365385</td>\n",
       "      <td>1.431818</td>\n",
       "      <td>48.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ATATGCACAACATCAA</th>\n",
       "      <td>_wt</td>\n",
       "      <td>79</td>\n",
       "      <td>70</td>\n",
       "      <td>18.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.227848</td>\n",
       "      <td>0.357143</td>\n",
       "      <td>0.531646</td>\n",
       "      <td>0.814286</td>\n",
       "      <td>1.037975</td>\n",
       "      <td>0.671429</td>\n",
       "      <td>74.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GGCAGTAAATGAAAGC</th>\n",
       "      <td>_wt</td>\n",
       "      <td>94</td>\n",
       "      <td>78</td>\n",
       "      <td>25.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>77.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>0.000010</td>\n",
       "      <td>0.265957</td>\n",
       "      <td>0.474359</td>\n",
       "      <td>0.808511</td>\n",
       "      <td>1.384615</td>\n",
       "      <td>0.819149</td>\n",
       "      <td>1.256410</td>\n",
       "      <td>86.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CTTTAACAAATGAAAC</th>\n",
       "      <td>BTK</td>\n",
       "      <td>1819</td>\n",
       "      <td>1594</td>\n",
       "      <td>125.0</td>\n",
       "      <td>131.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0.000162</td>\n",
       "      <td>0.068719</td>\n",
       "      <td>0.082183</td>\n",
       "      <td>0.040132</td>\n",
       "      <td>0.059598</td>\n",
       "      <td>0.032435</td>\n",
       "      <td>0.033250</td>\n",
       "      <td>1706.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TATATGGACCTAAAAA</th>\n",
       "      <td>BTK</td>\n",
       "      <td>4351</td>\n",
       "      <td>4008</td>\n",
       "      <td>237.0</td>\n",
       "      <td>369.0</td>\n",
       "      <td>164.0</td>\n",
       "      <td>183.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>137.0</td>\n",
       "      <td>0.000396</td>\n",
       "      <td>0.054470</td>\n",
       "      <td>0.092066</td>\n",
       "      <td>0.037692</td>\n",
       "      <td>0.045659</td>\n",
       "      <td>0.025282</td>\n",
       "      <td>0.034182</td>\n",
       "      <td>4179.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CTTAAAACAGCTATGG</th>\n",
       "      <td>BTK</td>\n",
       "      <td>1208</td>\n",
       "      <td>1038</td>\n",
       "      <td>56.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>0.000106</td>\n",
       "      <td>0.046358</td>\n",
       "      <td>0.081888</td>\n",
       "      <td>0.028146</td>\n",
       "      <td>0.042389</td>\n",
       "      <td>0.023179</td>\n",
       "      <td>0.027938</td>\n",
       "      <td>1123.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGGACCACAATCTAAC</th>\n",
       "      <td>BTK</td>\n",
       "      <td>2448</td>\n",
       "      <td>2362</td>\n",
       "      <td>230.0</td>\n",
       "      <td>189.0</td>\n",
       "      <td>112.0</td>\n",
       "      <td>111.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>0.000231</td>\n",
       "      <td>0.093954</td>\n",
       "      <td>0.080017</td>\n",
       "      <td>0.045752</td>\n",
       "      <td>0.046994</td>\n",
       "      <td>0.033497</td>\n",
       "      <td>0.035563</td>\n",
       "      <td>2405.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TGGGTTAACGACATTA</th>\n",
       "      <td>BTK</td>\n",
       "      <td>3712</td>\n",
       "      <td>3026</td>\n",
       "      <td>284.0</td>\n",
       "      <td>363.0</td>\n",
       "      <td>171.0</td>\n",
       "      <td>167.0</td>\n",
       "      <td>141.0</td>\n",
       "      <td>135.0</td>\n",
       "      <td>0.000326</td>\n",
       "      <td>0.076509</td>\n",
       "      <td>0.119960</td>\n",
       "      <td>0.046067</td>\n",
       "      <td>0.055188</td>\n",
       "      <td>0.037985</td>\n",
       "      <td>0.044613</td>\n",
       "      <td>3369.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>45979 rows Ã— 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 AA Variant  flag1  flag2  dmso1  dmso2   vem1   vem2   lxh1  \\\n",
       "TCGGACTTCTGTCTCA        _wt     48     59   23.0   25.0   30.0   43.0   33.0   \n",
       "TACCACCTGGTCAGAT        _wt    215    218  113.0  149.0  233.0  227.0  262.0   \n",
       "CGCGCGCTAAGCAAAG        _wt     52     44   15.0   21.0   31.0   60.0   71.0   \n",
       "ATATGCACAACATCAA        _wt     79     70   18.0   25.0   42.0   57.0   82.0   \n",
       "GGCAGTAAATGAAAGC        _wt     94     78   25.0   37.0   76.0  108.0   77.0   \n",
       "...                     ...    ...    ...    ...    ...    ...    ...    ...   \n",
       "CTTTAACAAATGAAAC        BTK   1819   1594  125.0  131.0   73.0   95.0   59.0   \n",
       "TATATGGACCTAAAAA        BTK   4351   4008  237.0  369.0  164.0  183.0  110.0   \n",
       "CTTAAAACAGCTATGG        BTK   1208   1038   56.0   85.0   34.0   44.0   28.0   \n",
       "AGGACCACAATCTAAC        BTK   2448   2362  230.0  189.0  112.0  111.0   82.0   \n",
       "TGGGTTAACGACATTA        BTK   3712   3026  284.0  363.0  171.0  167.0  141.0   \n",
       "\n",
       "                   lxh2  frequency  dmso1 score  dmso2 score  vem1 score  \\\n",
       "TCGGACTTCTGTCTCA   84.0   0.000007     0.479167     0.423729    0.625000   \n",
       "TACCACCTGGTCAGAT  268.0   0.000031     0.525581     0.683486    1.083721   \n",
       "CGCGCGCTAAGCAAAG   63.0   0.000006     0.288462     0.477273    0.596154   \n",
       "ATATGCACAACATCAA   47.0   0.000008     0.227848     0.357143    0.531646   \n",
       "GGCAGTAAATGAAAGC   98.0   0.000010     0.265957     0.474359    0.808511   \n",
       "...                 ...        ...          ...          ...         ...   \n",
       "CTTTAACAAATGAAAC   53.0   0.000162     0.068719     0.082183    0.040132   \n",
       "TATATGGACCTAAAAA  137.0   0.000396     0.054470     0.092066    0.037692   \n",
       "CTTAAAACAGCTATGG   29.0   0.000106     0.046358     0.081888    0.028146   \n",
       "AGGACCACAATCTAAC   84.0   0.000231     0.093954     0.080017    0.045752   \n",
       "TGGGTTAACGACATTA  135.0   0.000326     0.076509     0.119960    0.046067   \n",
       "\n",
       "                  vem2 score  lxh1 score  lxh2 score  Averge Flag  \n",
       "TCGGACTTCTGTCTCA    0.728814    0.687500    1.423729         53.5  \n",
       "TACCACCTGGTCAGAT    1.041284    1.218605    1.229358        216.5  \n",
       "CGCGCGCTAAGCAAAG    1.363636    1.365385    1.431818         48.0  \n",
       "ATATGCACAACATCAA    0.814286    1.037975    0.671429         74.5  \n",
       "GGCAGTAAATGAAAGC    1.384615    0.819149    1.256410         86.0  \n",
       "...                      ...         ...         ...          ...  \n",
       "CTTTAACAAATGAAAC    0.059598    0.032435    0.033250       1706.5  \n",
       "TATATGGACCTAAAAA    0.045659    0.025282    0.034182       4179.5  \n",
       "CTTAAAACAGCTATGG    0.042389    0.023179    0.027938       1123.0  \n",
       "AGGACCACAATCTAAC    0.046994    0.033497    0.035563       2405.0  \n",
       "TGGGTTAACGACATTA    0.055188    0.037985    0.044613       3369.0  \n",
       "\n",
       "[45979 rows x 17 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Map each barcode above to its cognate AA Variant\n",
    "#-------------------------------------------------------------------------------------------------------------#\n",
    "#Read in barcode:ProteinAAVariant map created from Pacbio data, rename columns, drop unnessary columns\n",
    "#What is read in from Illumina is the reverse complement of the actual barcode. \n",
    "#^To account for that, change barcodes in barcode_AAvar_map to reverse complement\n",
    "\n",
    "barcode_AAvar_map = pd.read_csv('/Users/jsimon/Documents/Lab/**RNABinderProject/SequencingRunFiles/PacBioSequencing (**Most files moved to google drive!)/MCP_Workup/Barcode+AAvariant map MCP_v3_addedBTK.txt', sep='\\t')\n",
    "barcode_AAvar_map.rename(columns = {'condensed variant':'AA Variant', 'Unnamed: 0.1':'barcode'}, inplace=True)\n",
    "barcode_AAvar_map = barcode_AAvar_map.set_index('barcode') #change index to be the barcode\n",
    "\n",
    "#change barcode to reverse complement\n",
    "\n",
    "barcode_AAvar_map['RevComplement'] =''\n",
    "\n",
    "for i,row in barcode_AAvar_map.iterrows():\n",
    "    seq = i\n",
    "    newseq = seq.replace(\"A\", \"t\").replace(\"C\", \"g\").replace(\"T\", \"a\").replace(\"G\", \"c\")\n",
    "    newseq = newseq.upper() #change replaced letters to uppercase\n",
    "    newseq = newseq[::-1]  #reverse strand\n",
    "    barcode_AAvar_map.at[i, 'RevComplement'] = newseq\n",
    "    \n",
    "#drop unnecessary columns and change index to the rev complement barcode\n",
    "\n",
    "barcode_AAvar_map = barcode_AAvar_map.drop(['Unnamed: 0', 'variant'], axis=1)\n",
    "barcode_AAvar_map = barcode_AAvar_map.set_index('RevComplement')\n",
    "\n",
    "#create list of positions in target library list. Include tdMCP tag\n",
    "\n",
    "targetPositionList_str = ['282', '300', '354', '376', '462', '463', '466', '485', '531', '532', '536', '568', '579',\n",
    "                          '592', '600', '606', '608', '615', '619', '621', '626', '641', '659', '663', '717', '718',\n",
    "                          '721', '723', '727', '730', '736', '738', '740', '741', '742', '743', '745', '746', '759',\n",
    "                          '773', '775', '783', '792', '805', '813', '848', '855', '856', '858', '860', '861', '862',\n",
    "                          '866', '867', '868', '869', '870', '871', '872', '873', '874', '875', '876', '878', '879',\n",
    "                          '880', '882', '883', '888', '889', '890', '892', '910', '940', '945', '956', '969', '999',\n",
    "                          '1000', '1001', '1009', '1036']\n",
    "\n",
    "#Calculate ratios, add to df\n",
    "data['dmso1 score'] = data['dmso1']/data['flag1']\n",
    "data['dmso2 score'] = data['dmso2']/data['flag2']\n",
    "data['vem1 score'] = data['vem1']/data['flag1']\n",
    "data['vem2 score'] = data['vem2']/data['flag2']\n",
    "data['lxh1 score'] = data['lxh1']/data['flag1']\n",
    "data['lxh2 score'] = data['lxh2']/data['flag2']\n",
    "data['Averge Flag'] = (data['flag1'] + data['flag2'])/2\n",
    "\n",
    "#Merge AAvar map ('barcode_AAvar_map') with Illumina counted barcodes and calculated ratios ('barcoderatios') into single barcoderatiosframe\n",
    "data = pd.merge(barcode_AAvar_map, data, left_index=True, right_index=True)\n",
    "\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py:844: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/opt/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py:965: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[item] = s\n",
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:82: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:83: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:84: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:85: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:86: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:87: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:91: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:93: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:95: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:99: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AA Variant</th>\n",
       "      <th>flag1</th>\n",
       "      <th>flag2</th>\n",
       "      <th>dmso1</th>\n",
       "      <th>dmso2</th>\n",
       "      <th>vem1</th>\n",
       "      <th>vem2</th>\n",
       "      <th>lxh1</th>\n",
       "      <th>lxh2</th>\n",
       "      <th>frequency</th>\n",
       "      <th>dmso1 score</th>\n",
       "      <th>dmso2 score</th>\n",
       "      <th>vem1 score</th>\n",
       "      <th>vem2 score</th>\n",
       "      <th>lxh1 score</th>\n",
       "      <th>lxh2 score</th>\n",
       "      <th>Averge Flag</th>\n",
       "      <th>Wild Type Residue</th>\n",
       "      <th>Mutation</th>\n",
       "      <th>Position</th>\n",
       "      <th>target</th>\n",
       "      <th>Label</th>\n",
       "      <th>dmso1, WT normalized, BC level</th>\n",
       "      <th>dmso2, WT normalized, BC level</th>\n",
       "      <th>vem1, WT normalized, BC level</th>\n",
       "      <th>vem2, WT normalized, BC level</th>\n",
       "      <th>lxh1, WT normalized, BC level</th>\n",
       "      <th>lxh2, WT normalized, BC level</th>\n",
       "      <th>mean dmso, WT normalized, BC level</th>\n",
       "      <th>mean vem, WT normalized, BC level</th>\n",
       "      <th>mean lxh, WT normalized, BC level</th>\n",
       "      <th>Number of Barcodes/AA Var</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>TCGGACTTCTGTCTCA</th>\n",
       "      <td>_wt</td>\n",
       "      <td>48</td>\n",
       "      <td>59</td>\n",
       "      <td>23.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>0.000007</td>\n",
       "      <td>0.479167</td>\n",
       "      <td>0.423729</td>\n",
       "      <td>0.625000</td>\n",
       "      <td>0.728814</td>\n",
       "      <td>0.687500</td>\n",
       "      <td>1.423729</td>\n",
       "      <td>53.5</td>\n",
       "      <td>wild type</td>\n",
       "      <td>wild type</td>\n",
       "      <td>wild type</td>\n",
       "      <td>True</td>\n",
       "      <td>_wt</td>\n",
       "      <td>1.163631</td>\n",
       "      <td>0.708359</td>\n",
       "      <td>0.781136</td>\n",
       "      <td>0.901082</td>\n",
       "      <td>0.676148</td>\n",
       "      <td>1.268784</td>\n",
       "      <td>0.935995</td>\n",
       "      <td>0.841109</td>\n",
       "      <td>0.972466</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TACCACCTGGTCAGAT</th>\n",
       "      <td>_wt</td>\n",
       "      <td>215</td>\n",
       "      <td>218</td>\n",
       "      <td>113.0</td>\n",
       "      <td>149.0</td>\n",
       "      <td>233.0</td>\n",
       "      <td>227.0</td>\n",
       "      <td>262.0</td>\n",
       "      <td>268.0</td>\n",
       "      <td>0.000031</td>\n",
       "      <td>0.525581</td>\n",
       "      <td>0.683486</td>\n",
       "      <td>1.083721</td>\n",
       "      <td>1.041284</td>\n",
       "      <td>1.218605</td>\n",
       "      <td>1.229358</td>\n",
       "      <td>216.5</td>\n",
       "      <td>wild type</td>\n",
       "      <td>wild type</td>\n",
       "      <td>wild type</td>\n",
       "      <td>True</td>\n",
       "      <td>_wt</td>\n",
       "      <td>1.276347</td>\n",
       "      <td>1.142602</td>\n",
       "      <td>1.354453</td>\n",
       "      <td>1.287411</td>\n",
       "      <td>1.198484</td>\n",
       "      <td>1.095567</td>\n",
       "      <td>1.209475</td>\n",
       "      <td>1.320932</td>\n",
       "      <td>1.147025</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CGCGCGCTAAGCAAAG</th>\n",
       "      <td>_wt</td>\n",
       "      <td>52</td>\n",
       "      <td>44</td>\n",
       "      <td>15.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>0.000006</td>\n",
       "      <td>0.288462</td>\n",
       "      <td>0.477273</td>\n",
       "      <td>0.596154</td>\n",
       "      <td>1.363636</td>\n",
       "      <td>1.365385</td>\n",
       "      <td>1.431818</td>\n",
       "      <td>48.0</td>\n",
       "      <td>wild type</td>\n",
       "      <td>wild type</td>\n",
       "      <td>wild type</td>\n",
       "      <td>True</td>\n",
       "      <td>_wt</td>\n",
       "      <td>0.700514</td>\n",
       "      <td>0.797869</td>\n",
       "      <td>0.745083</td>\n",
       "      <td>1.685957</td>\n",
       "      <td>1.342840</td>\n",
       "      <td>1.275993</td>\n",
       "      <td>0.749192</td>\n",
       "      <td>1.215520</td>\n",
       "      <td>1.309417</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ATATGCACAACATCAA</th>\n",
       "      <td>_wt</td>\n",
       "      <td>79</td>\n",
       "      <td>70</td>\n",
       "      <td>18.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.227848</td>\n",
       "      <td>0.357143</td>\n",
       "      <td>0.531646</td>\n",
       "      <td>0.814286</td>\n",
       "      <td>1.037975</td>\n",
       "      <td>0.671429</td>\n",
       "      <td>74.5</td>\n",
       "      <td>wild type</td>\n",
       "      <td>wild type</td>\n",
       "      <td>wild type</td>\n",
       "      <td>True</td>\n",
       "      <td>_wt</td>\n",
       "      <td>0.553317</td>\n",
       "      <td>0.597045</td>\n",
       "      <td>0.664460</td>\n",
       "      <td>1.006757</td>\n",
       "      <td>1.020836</td>\n",
       "      <td>0.598357</td>\n",
       "      <td>0.575181</td>\n",
       "      <td>0.835609</td>\n",
       "      <td>0.809597</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GGCAGTAAATGAAAGC</th>\n",
       "      <td>_wt</td>\n",
       "      <td>94</td>\n",
       "      <td>78</td>\n",
       "      <td>25.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>77.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>0.000010</td>\n",
       "      <td>0.265957</td>\n",
       "      <td>0.474359</td>\n",
       "      <td>0.808511</td>\n",
       "      <td>1.384615</td>\n",
       "      <td>0.819149</td>\n",
       "      <td>1.256410</td>\n",
       "      <td>86.0</td>\n",
       "      <td>wild type</td>\n",
       "      <td>wild type</td>\n",
       "      <td>wild type</td>\n",
       "      <td>True</td>\n",
       "      <td>_wt</td>\n",
       "      <td>0.645864</td>\n",
       "      <td>0.792998</td>\n",
       "      <td>1.010490</td>\n",
       "      <td>1.711895</td>\n",
       "      <td>0.805624</td>\n",
       "      <td>1.119675</td>\n",
       "      <td>0.719431</td>\n",
       "      <td>1.361193</td>\n",
       "      <td>0.962649</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CTTTAACAAATGAAAC</th>\n",
       "      <td>BTK</td>\n",
       "      <td>1819</td>\n",
       "      <td>1594</td>\n",
       "      <td>125.0</td>\n",
       "      <td>131.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0.000162</td>\n",
       "      <td>0.068719</td>\n",
       "      <td>0.082183</td>\n",
       "      <td>0.040132</td>\n",
       "      <td>0.059598</td>\n",
       "      <td>0.032435</td>\n",
       "      <td>0.033250</td>\n",
       "      <td>1706.5</td>\n",
       "      <td>BTK</td>\n",
       "      <td>BTK</td>\n",
       "      <td>BTK</td>\n",
       "      <td>True</td>\n",
       "      <td>BTK</td>\n",
       "      <td>0.166881</td>\n",
       "      <td>0.137388</td>\n",
       "      <td>0.050158</td>\n",
       "      <td>0.073686</td>\n",
       "      <td>0.031900</td>\n",
       "      <td>0.029631</td>\n",
       "      <td>0.152134</td>\n",
       "      <td>0.061922</td>\n",
       "      <td>0.030765</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TATATGGACCTAAAAA</th>\n",
       "      <td>BTK</td>\n",
       "      <td>4351</td>\n",
       "      <td>4008</td>\n",
       "      <td>237.0</td>\n",
       "      <td>369.0</td>\n",
       "      <td>164.0</td>\n",
       "      <td>183.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>137.0</td>\n",
       "      <td>0.000396</td>\n",
       "      <td>0.054470</td>\n",
       "      <td>0.092066</td>\n",
       "      <td>0.037692</td>\n",
       "      <td>0.045659</td>\n",
       "      <td>0.025282</td>\n",
       "      <td>0.034182</td>\n",
       "      <td>4179.5</td>\n",
       "      <td>BTK</td>\n",
       "      <td>BTK</td>\n",
       "      <td>BTK</td>\n",
       "      <td>True</td>\n",
       "      <td>BTK</td>\n",
       "      <td>0.132278</td>\n",
       "      <td>0.153909</td>\n",
       "      <td>0.047109</td>\n",
       "      <td>0.056451</td>\n",
       "      <td>0.024864</td>\n",
       "      <td>0.030462</td>\n",
       "      <td>0.143094</td>\n",
       "      <td>0.051780</td>\n",
       "      <td>0.027663</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CTTAAAACAGCTATGG</th>\n",
       "      <td>BTK</td>\n",
       "      <td>1208</td>\n",
       "      <td>1038</td>\n",
       "      <td>56.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>0.000106</td>\n",
       "      <td>0.046358</td>\n",
       "      <td>0.081888</td>\n",
       "      <td>0.028146</td>\n",
       "      <td>0.042389</td>\n",
       "      <td>0.023179</td>\n",
       "      <td>0.027938</td>\n",
       "      <td>1123.0</td>\n",
       "      <td>BTK</td>\n",
       "      <td>BTK</td>\n",
       "      <td>BTK</td>\n",
       "      <td>True</td>\n",
       "      <td>BTK</td>\n",
       "      <td>0.112577</td>\n",
       "      <td>0.136895</td>\n",
       "      <td>0.035177</td>\n",
       "      <td>0.052409</td>\n",
       "      <td>0.022796</td>\n",
       "      <td>0.024898</td>\n",
       "      <td>0.124736</td>\n",
       "      <td>0.043793</td>\n",
       "      <td>0.023847</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGGACCACAATCTAAC</th>\n",
       "      <td>BTK</td>\n",
       "      <td>2448</td>\n",
       "      <td>2362</td>\n",
       "      <td>230.0</td>\n",
       "      <td>189.0</td>\n",
       "      <td>112.0</td>\n",
       "      <td>111.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>0.000231</td>\n",
       "      <td>0.093954</td>\n",
       "      <td>0.080017</td>\n",
       "      <td>0.045752</td>\n",
       "      <td>0.046994</td>\n",
       "      <td>0.033497</td>\n",
       "      <td>0.035563</td>\n",
       "      <td>2405.0</td>\n",
       "      <td>BTK</td>\n",
       "      <td>BTK</td>\n",
       "      <td>BTK</td>\n",
       "      <td>True</td>\n",
       "      <td>BTK</td>\n",
       "      <td>0.228163</td>\n",
       "      <td>0.133766</td>\n",
       "      <td>0.057181</td>\n",
       "      <td>0.058102</td>\n",
       "      <td>0.032944</td>\n",
       "      <td>0.031693</td>\n",
       "      <td>0.180965</td>\n",
       "      <td>0.057642</td>\n",
       "      <td>0.032318</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TGGGTTAACGACATTA</th>\n",
       "      <td>BTK</td>\n",
       "      <td>3712</td>\n",
       "      <td>3026</td>\n",
       "      <td>284.0</td>\n",
       "      <td>363.0</td>\n",
       "      <td>171.0</td>\n",
       "      <td>167.0</td>\n",
       "      <td>141.0</td>\n",
       "      <td>135.0</td>\n",
       "      <td>0.000326</td>\n",
       "      <td>0.076509</td>\n",
       "      <td>0.119960</td>\n",
       "      <td>0.046067</td>\n",
       "      <td>0.055188</td>\n",
       "      <td>0.037985</td>\n",
       "      <td>0.044613</td>\n",
       "      <td>3369.0</td>\n",
       "      <td>BTK</td>\n",
       "      <td>BTK</td>\n",
       "      <td>BTK</td>\n",
       "      <td>True</td>\n",
       "      <td>BTK</td>\n",
       "      <td>0.185797</td>\n",
       "      <td>0.200541</td>\n",
       "      <td>0.057575</td>\n",
       "      <td>0.068233</td>\n",
       "      <td>0.037358</td>\n",
       "      <td>0.039758</td>\n",
       "      <td>0.193169</td>\n",
       "      <td>0.062904</td>\n",
       "      <td>0.038558</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>41668 rows Ã— 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 AA Variant  flag1  flag2  dmso1  dmso2   vem1   vem2   lxh1  \\\n",
       "TCGGACTTCTGTCTCA        _wt     48     59   23.0   25.0   30.0   43.0   33.0   \n",
       "TACCACCTGGTCAGAT        _wt    215    218  113.0  149.0  233.0  227.0  262.0   \n",
       "CGCGCGCTAAGCAAAG        _wt     52     44   15.0   21.0   31.0   60.0   71.0   \n",
       "ATATGCACAACATCAA        _wt     79     70   18.0   25.0   42.0   57.0   82.0   \n",
       "GGCAGTAAATGAAAGC        _wt     94     78   25.0   37.0   76.0  108.0   77.0   \n",
       "...                     ...    ...    ...    ...    ...    ...    ...    ...   \n",
       "CTTTAACAAATGAAAC        BTK   1819   1594  125.0  131.0   73.0   95.0   59.0   \n",
       "TATATGGACCTAAAAA        BTK   4351   4008  237.0  369.0  164.0  183.0  110.0   \n",
       "CTTAAAACAGCTATGG        BTK   1208   1038   56.0   85.0   34.0   44.0   28.0   \n",
       "AGGACCACAATCTAAC        BTK   2448   2362  230.0  189.0  112.0  111.0   82.0   \n",
       "TGGGTTAACGACATTA        BTK   3712   3026  284.0  363.0  171.0  167.0  141.0   \n",
       "\n",
       "                   lxh2  frequency  dmso1 score  dmso2 score  vem1 score  \\\n",
       "TCGGACTTCTGTCTCA   84.0   0.000007     0.479167     0.423729    0.625000   \n",
       "TACCACCTGGTCAGAT  268.0   0.000031     0.525581     0.683486    1.083721   \n",
       "CGCGCGCTAAGCAAAG   63.0   0.000006     0.288462     0.477273    0.596154   \n",
       "ATATGCACAACATCAA   47.0   0.000008     0.227848     0.357143    0.531646   \n",
       "GGCAGTAAATGAAAGC   98.0   0.000010     0.265957     0.474359    0.808511   \n",
       "...                 ...        ...          ...          ...         ...   \n",
       "CTTTAACAAATGAAAC   53.0   0.000162     0.068719     0.082183    0.040132   \n",
       "TATATGGACCTAAAAA  137.0   0.000396     0.054470     0.092066    0.037692   \n",
       "CTTAAAACAGCTATGG   29.0   0.000106     0.046358     0.081888    0.028146   \n",
       "AGGACCACAATCTAAC   84.0   0.000231     0.093954     0.080017    0.045752   \n",
       "TGGGTTAACGACATTA  135.0   0.000326     0.076509     0.119960    0.046067   \n",
       "\n",
       "                  vem2 score  lxh1 score  lxh2 score  Averge Flag  \\\n",
       "TCGGACTTCTGTCTCA    0.728814    0.687500    1.423729         53.5   \n",
       "TACCACCTGGTCAGAT    1.041284    1.218605    1.229358        216.5   \n",
       "CGCGCGCTAAGCAAAG    1.363636    1.365385    1.431818         48.0   \n",
       "ATATGCACAACATCAA    0.814286    1.037975    0.671429         74.5   \n",
       "GGCAGTAAATGAAAGC    1.384615    0.819149    1.256410         86.0   \n",
       "...                      ...         ...         ...          ...   \n",
       "CTTTAACAAATGAAAC    0.059598    0.032435    0.033250       1706.5   \n",
       "TATATGGACCTAAAAA    0.045659    0.025282    0.034182       4179.5   \n",
       "CTTAAAACAGCTATGG    0.042389    0.023179    0.027938       1123.0   \n",
       "AGGACCACAATCTAAC    0.046994    0.033497    0.035563       2405.0   \n",
       "TGGGTTAACGACATTA    0.055188    0.037985    0.044613       3369.0   \n",
       "\n",
       "                 Wild Type Residue   Mutation   Position target Label  \\\n",
       "TCGGACTTCTGTCTCA         wild type  wild type  wild type   True   _wt   \n",
       "TACCACCTGGTCAGAT         wild type  wild type  wild type   True   _wt   \n",
       "CGCGCGCTAAGCAAAG         wild type  wild type  wild type   True   _wt   \n",
       "ATATGCACAACATCAA         wild type  wild type  wild type   True   _wt   \n",
       "GGCAGTAAATGAAAGC         wild type  wild type  wild type   True   _wt   \n",
       "...                            ...        ...        ...    ...   ...   \n",
       "CTTTAACAAATGAAAC               BTK        BTK        BTK   True   BTK   \n",
       "TATATGGACCTAAAAA               BTK        BTK        BTK   True   BTK   \n",
       "CTTAAAACAGCTATGG               BTK        BTK        BTK   True   BTK   \n",
       "AGGACCACAATCTAAC               BTK        BTK        BTK   True   BTK   \n",
       "TGGGTTAACGACATTA               BTK        BTK        BTK   True   BTK   \n",
       "\n",
       "                  dmso1, WT normalized, BC level  \\\n",
       "TCGGACTTCTGTCTCA                        1.163631   \n",
       "TACCACCTGGTCAGAT                        1.276347   \n",
       "CGCGCGCTAAGCAAAG                        0.700514   \n",
       "ATATGCACAACATCAA                        0.553317   \n",
       "GGCAGTAAATGAAAGC                        0.645864   \n",
       "...                                          ...   \n",
       "CTTTAACAAATGAAAC                        0.166881   \n",
       "TATATGGACCTAAAAA                        0.132278   \n",
       "CTTAAAACAGCTATGG                        0.112577   \n",
       "AGGACCACAATCTAAC                        0.228163   \n",
       "TGGGTTAACGACATTA                        0.185797   \n",
       "\n",
       "                  dmso2, WT normalized, BC level  \\\n",
       "TCGGACTTCTGTCTCA                        0.708359   \n",
       "TACCACCTGGTCAGAT                        1.142602   \n",
       "CGCGCGCTAAGCAAAG                        0.797869   \n",
       "ATATGCACAACATCAA                        0.597045   \n",
       "GGCAGTAAATGAAAGC                        0.792998   \n",
       "...                                          ...   \n",
       "CTTTAACAAATGAAAC                        0.137388   \n",
       "TATATGGACCTAAAAA                        0.153909   \n",
       "CTTAAAACAGCTATGG                        0.136895   \n",
       "AGGACCACAATCTAAC                        0.133766   \n",
       "TGGGTTAACGACATTA                        0.200541   \n",
       "\n",
       "                  vem1, WT normalized, BC level  \\\n",
       "TCGGACTTCTGTCTCA                       0.781136   \n",
       "TACCACCTGGTCAGAT                       1.354453   \n",
       "CGCGCGCTAAGCAAAG                       0.745083   \n",
       "ATATGCACAACATCAA                       0.664460   \n",
       "GGCAGTAAATGAAAGC                       1.010490   \n",
       "...                                         ...   \n",
       "CTTTAACAAATGAAAC                       0.050158   \n",
       "TATATGGACCTAAAAA                       0.047109   \n",
       "CTTAAAACAGCTATGG                       0.035177   \n",
       "AGGACCACAATCTAAC                       0.057181   \n",
       "TGGGTTAACGACATTA                       0.057575   \n",
       "\n",
       "                  vem2, WT normalized, BC level  \\\n",
       "TCGGACTTCTGTCTCA                       0.901082   \n",
       "TACCACCTGGTCAGAT                       1.287411   \n",
       "CGCGCGCTAAGCAAAG                       1.685957   \n",
       "ATATGCACAACATCAA                       1.006757   \n",
       "GGCAGTAAATGAAAGC                       1.711895   \n",
       "...                                         ...   \n",
       "CTTTAACAAATGAAAC                       0.073686   \n",
       "TATATGGACCTAAAAA                       0.056451   \n",
       "CTTAAAACAGCTATGG                       0.052409   \n",
       "AGGACCACAATCTAAC                       0.058102   \n",
       "TGGGTTAACGACATTA                       0.068233   \n",
       "\n",
       "                  lxh1, WT normalized, BC level  \\\n",
       "TCGGACTTCTGTCTCA                       0.676148   \n",
       "TACCACCTGGTCAGAT                       1.198484   \n",
       "CGCGCGCTAAGCAAAG                       1.342840   \n",
       "ATATGCACAACATCAA                       1.020836   \n",
       "GGCAGTAAATGAAAGC                       0.805624   \n",
       "...                                         ...   \n",
       "CTTTAACAAATGAAAC                       0.031900   \n",
       "TATATGGACCTAAAAA                       0.024864   \n",
       "CTTAAAACAGCTATGG                       0.022796   \n",
       "AGGACCACAATCTAAC                       0.032944   \n",
       "TGGGTTAACGACATTA                       0.037358   \n",
       "\n",
       "                  lxh2, WT normalized, BC level  \\\n",
       "TCGGACTTCTGTCTCA                       1.268784   \n",
       "TACCACCTGGTCAGAT                       1.095567   \n",
       "CGCGCGCTAAGCAAAG                       1.275993   \n",
       "ATATGCACAACATCAA                       0.598357   \n",
       "GGCAGTAAATGAAAGC                       1.119675   \n",
       "...                                         ...   \n",
       "CTTTAACAAATGAAAC                       0.029631   \n",
       "TATATGGACCTAAAAA                       0.030462   \n",
       "CTTAAAACAGCTATGG                       0.024898   \n",
       "AGGACCACAATCTAAC                       0.031693   \n",
       "TGGGTTAACGACATTA                       0.039758   \n",
       "\n",
       "                  mean dmso, WT normalized, BC level  \\\n",
       "TCGGACTTCTGTCTCA                            0.935995   \n",
       "TACCACCTGGTCAGAT                            1.209475   \n",
       "CGCGCGCTAAGCAAAG                            0.749192   \n",
       "ATATGCACAACATCAA                            0.575181   \n",
       "GGCAGTAAATGAAAGC                            0.719431   \n",
       "...                                              ...   \n",
       "CTTTAACAAATGAAAC                            0.152134   \n",
       "TATATGGACCTAAAAA                            0.143094   \n",
       "CTTAAAACAGCTATGG                            0.124736   \n",
       "AGGACCACAATCTAAC                            0.180965   \n",
       "TGGGTTAACGACATTA                            0.193169   \n",
       "\n",
       "                  mean vem, WT normalized, BC level  \\\n",
       "TCGGACTTCTGTCTCA                           0.841109   \n",
       "TACCACCTGGTCAGAT                           1.320932   \n",
       "CGCGCGCTAAGCAAAG                           1.215520   \n",
       "ATATGCACAACATCAA                           0.835609   \n",
       "GGCAGTAAATGAAAGC                           1.361193   \n",
       "...                                             ...   \n",
       "CTTTAACAAATGAAAC                           0.061922   \n",
       "TATATGGACCTAAAAA                           0.051780   \n",
       "CTTAAAACAGCTATGG                           0.043793   \n",
       "AGGACCACAATCTAAC                           0.057642   \n",
       "TGGGTTAACGACATTA                           0.062904   \n",
       "\n",
       "                  mean lxh, WT normalized, BC level  Number of Barcodes/AA Var  \n",
       "TCGGACTTCTGTCTCA                           0.972466                         84  \n",
       "TACCACCTGGTCAGAT                           1.147025                         84  \n",
       "CGCGCGCTAAGCAAAG                           1.309417                         84  \n",
       "ATATGCACAACATCAA                           0.809597                         84  \n",
       "GGCAGTAAATGAAAGC                           0.962649                         84  \n",
       "...                                             ...                        ...  \n",
       "CTTTAACAAATGAAAC                           0.030765                          5  \n",
       "TATATGGACCTAAAAA                           0.027663                          5  \n",
       "CTTAAAACAGCTATGG                           0.023847                          5  \n",
       "AGGACCACAATCTAAC                           0.032318                          5  \n",
       "TGGGTTAACGACATTA                           0.038558                          5  \n",
       "\n",
       "[41668 rows x 32 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Add a column containing WT residue, position, and mutation\n",
    "for i, row in data.iterrows():\n",
    "    if row['AA Variant'] == 'BTK': #internal background reference\n",
    "        data.at[i, 'Wild Type Residue'] = 'BTK'\n",
    "        data.at[i, 'Mutation'] = 'BTK'\n",
    "        data.at[i, 'Position'] = 'BTK'\n",
    "    elif str(row['AA Variant']) == 'multiple AA variant':\n",
    "        data.at[i, 'Position'] = 0\n",
    "    elif str(row['AA Variant']) == 'AA mutation & synon.':\n",
    "        data.at[i, 'Position'] = 0    \n",
    "    elif str(row['AA Variant']) == 'irrelevant':\n",
    "        data.at[i, 'Position'] = 0 \n",
    "    elif str(row['AA Variant'])[3:6] == '   ':\n",
    "        data.at[i, 'Position'] = 0\n",
    "    elif str(row['AA Variant']) == '_wt':\n",
    "        data.at[i, 'Wild Type Residue'] = \"wild type\"\n",
    "        data.at[i, 'Mutation'] = \"wild type\"\n",
    "        data.at[i, 'Position'] = \"wild type\"\n",
    "    elif str(row['AA Variant']) == 'synon.':\n",
    "        data.at[i, 'Wild Type Residue'] = \"synonymous\"\n",
    "        data.at[i, 'Mutation'] = \"synonymous\"\n",
    "        data.at[i, 'Position'] = \"synonymous\"\n",
    "    elif len(str(row['AA Variant']))==9:\n",
    "        data.at[i, 'Wild Type Residue'] = str(row['AA Variant'])[:3]\n",
    "        data.at[i, 'Mutation'] = str(row['AA Variant'])[6:]\n",
    "        position = int(str(row['AA Variant'])[3:6])-274 #relabel tagged ORF position to match that of untagged BRAF\n",
    "        data.at[i, 'Position'] = str(position)\n",
    "    elif len(str(row['AA Variant']))==8:\n",
    "        data.at[i, 'Wild Type Residue'] = str(row['AA Variant'])[:3]\n",
    "        data.at[i, 'Mutation'] = str(row['AA Variant'])[5:]\n",
    "        position = int(str(row['AA Variant'])[3:5])-274 #relabel tagged ORF position to match that of untagged BRAF\n",
    "        data.at[i, 'Position'] = str(position)\n",
    "    elif len(str(row['AA Variant']))==10:\n",
    "        data.at[i, 'Wild Type Residue'] = str(row['AA Variant'])[:3]\n",
    "        data.at[i, 'Mutation'] = str(row['AA Variant'])[7:]\n",
    "        position = int(str(row['AA Variant'])[3:7])-274 #relabel tagged ORF position to match that of untagged BRAF\n",
    "        data.at[i, 'Position'] = str(position)\n",
    "    else:\n",
    "        data.at[i, 'Position'] = 0\n",
    "        \n",
    "for i, row in data.iterrows():\n",
    "    if row['AA Variant'] == \"_wt\":\n",
    "        data.at[i, 'target'] = True\n",
    "    elif str(row['AA Variant'])[3:6] == \"on.\":\n",
    "        data.at[i, 'target'] = True\n",
    "    elif row['AA Variant'] == 'BTK':\n",
    "        data.at[i, 'target'] = True\n",
    "    elif str(int(row['Position'])+274) in targetPositionList_str:\n",
    "        data.at[i, 'target'] = True    \n",
    "    else:\n",
    "        data.at[i, 'target'] = False\n",
    "\n",
    "#filter out any non-target variants\n",
    "data = data[data['target'] == True]\n",
    "\n",
    "#Add column containing correct label\n",
    "\n",
    "for i, row in data.iterrows():\n",
    "    if row['Wild Type Residue'] == 'wild type':\n",
    "        label = '_wt'\n",
    "    elif row['Wild Type Residue'] == 'synonymous':\n",
    "        label = 'synon.'\n",
    "    elif row['AA Variant'] == 'BTK':\n",
    "        label = 'BTK'\n",
    "    else:\n",
    "        label = str(row['Wild Type Residue']) + str(row['Position']) + str(row['Mutation'])\n",
    "    data.at[i, 'Label'] = label  \n",
    "    \n",
    "#Recalculate scores, internally normalizing to mean WILD TYPE score \n",
    "#------------------------------------------------------------------------------------------------#\n",
    "\n",
    "#Calculate average wild type score\n",
    "wildtype = data[data['AA Variant'] == '_wt']\n",
    "\n",
    "dmso1_wt_mean = wildtype['dmso1 score'].mean()\n",
    "dmso2_wt_mean = wildtype['dmso2 score'].mean()\n",
    "vem1_wt_mean = wildtype['vem1 score'].mean()\n",
    "vem2_wt_mean = wildtype['vem2 score'].mean()\n",
    "lxh1_wt_mean = wildtype['lxh1 score'].mean()\n",
    "lxh2_wt_mean = wildtype['lxh2 score'].mean()\n",
    "\n",
    "data['dmso1, WT normalized, BC level'] = data['dmso1 score']/dmso1_wt_mean\n",
    "data['dmso2, WT normalized, BC level'] = data['dmso2 score']/dmso2_wt_mean\n",
    "data['vem1, WT normalized, BC level'] = data['vem1 score']/vem1_wt_mean\n",
    "data['vem2, WT normalized, BC level'] = data['vem2 score']/vem2_wt_mean\n",
    "data['lxh1, WT normalized, BC level'] = data['lxh1 score']/lxh1_wt_mean\n",
    "data['lxh2, WT normalized, BC level'] = data['lxh2 score']/lxh2_wt_mean\n",
    "\n",
    "#Average two replicates\n",
    "data['mean dmso, WT normalized, BC level'] = (data['dmso1, WT normalized, BC level'] \n",
    "                                                       + data['dmso2, WT normalized, BC level'])/2\n",
    "data['mean vem, WT normalized, BC level'] = (data['vem1, WT normalized, BC level'] \n",
    "                                                       + data['vem2, WT normalized, BC level'])/2\n",
    "data['mean lxh, WT normalized, BC level'] = (data['lxh1, WT normalized, BC level'] \n",
    "                                                       + data['lxh2, WT normalized, BC level'])/2\n",
    "\n",
    "#Count number of barcodes per variant\n",
    "\n",
    "data['Number of Barcodes/AA Var'] = data['AA Variant'].map(data['AA Variant'].value_counts())\n",
    "\n",
    "data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Replicate Scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:39: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DMSO Score 1, Variant level</th>\n",
       "      <th>DMSO Score 2, Variant level</th>\n",
       "      <th>VEM Score 1, Variant level</th>\n",
       "      <th>VEM Score 2, Variant level</th>\n",
       "      <th>LXH Score 1, Variant level</th>\n",
       "      <th>LXH Score 2, Variant level</th>\n",
       "      <th>Averge Flag</th>\n",
       "      <th>Average DMSO Score, Variant level</th>\n",
       "      <th>Average VEM Score, Variant level</th>\n",
       "      <th>Average LXH Score, Variant level</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>genomic variant</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>c.1126A&gt;T (p.=), c.1127G&gt;C (p.=)</th>\n",
       "      <td>0.861514</td>\n",
       "      <td>1.074013</td>\n",
       "      <td>0.974284</td>\n",
       "      <td>1.024429</td>\n",
       "      <td>1.041329</td>\n",
       "      <td>1.012745</td>\n",
       "      <td>113.750000</td>\n",
       "      <td>0.967763</td>\n",
       "      <td>0.999357</td>\n",
       "      <td>1.027037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c.1398C&gt;T (p.=)</th>\n",
       "      <td>1.223792</td>\n",
       "      <td>0.906745</td>\n",
       "      <td>1.048542</td>\n",
       "      <td>0.920296</td>\n",
       "      <td>0.908997</td>\n",
       "      <td>0.912024</td>\n",
       "      <td>100.050000</td>\n",
       "      <td>1.065268</td>\n",
       "      <td>0.984419</td>\n",
       "      <td>0.910511</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c.1455C&gt;T (p.=)</th>\n",
       "      <td>1.241292</td>\n",
       "      <td>0.998782</td>\n",
       "      <td>0.959970</td>\n",
       "      <td>1.071859</td>\n",
       "      <td>0.966379</td>\n",
       "      <td>0.959167</td>\n",
       "      <td>57.720000</td>\n",
       "      <td>1.120037</td>\n",
       "      <td>1.015915</td>\n",
       "      <td>0.962773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c.1593G&gt;A (p.=)</th>\n",
       "      <td>1.060335</td>\n",
       "      <td>0.966782</td>\n",
       "      <td>0.916403</td>\n",
       "      <td>1.083860</td>\n",
       "      <td>0.967772</td>\n",
       "      <td>1.039119</td>\n",
       "      <td>93.380000</td>\n",
       "      <td>1.013559</td>\n",
       "      <td>1.000132</td>\n",
       "      <td>1.003445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c.1596C&gt;A (p.=)</th>\n",
       "      <td>1.023199</td>\n",
       "      <td>0.923394</td>\n",
       "      <td>1.028119</td>\n",
       "      <td>0.918473</td>\n",
       "      <td>1.003361</td>\n",
       "      <td>0.925967</td>\n",
       "      <td>78.918919</td>\n",
       "      <td>0.973296</td>\n",
       "      <td>0.973296</td>\n",
       "      <td>0.964664</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c.3000A&gt;G (p.=)</th>\n",
       "      <td>1.073204</td>\n",
       "      <td>0.921730</td>\n",
       "      <td>0.883162</td>\n",
       "      <td>0.889270</td>\n",
       "      <td>0.905588</td>\n",
       "      <td>0.915866</td>\n",
       "      <td>87.189655</td>\n",
       "      <td>0.997467</td>\n",
       "      <td>0.886216</td>\n",
       "      <td>0.910727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c.3001A&gt;T (p.=), c.3002G&gt;C (p.=)</th>\n",
       "      <td>0.960130</td>\n",
       "      <td>1.011436</td>\n",
       "      <td>0.927023</td>\n",
       "      <td>1.029051</td>\n",
       "      <td>0.945290</td>\n",
       "      <td>1.016869</td>\n",
       "      <td>111.000000</td>\n",
       "      <td>0.985783</td>\n",
       "      <td>0.978037</td>\n",
       "      <td>0.981080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c.3025C&gt;A (p.=), c.3027G&gt;A (p.=)</th>\n",
       "      <td>1.071434</td>\n",
       "      <td>0.901525</td>\n",
       "      <td>0.986006</td>\n",
       "      <td>1.072690</td>\n",
       "      <td>0.920885</td>\n",
       "      <td>1.037558</td>\n",
       "      <td>79.941176</td>\n",
       "      <td>0.986480</td>\n",
       "      <td>1.029348</td>\n",
       "      <td>0.979222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c.3108C&gt;T (p.=)</th>\n",
       "      <td>1.135469</td>\n",
       "      <td>0.962758</td>\n",
       "      <td>0.993668</td>\n",
       "      <td>1.014727</td>\n",
       "      <td>0.921778</td>\n",
       "      <td>1.079155</td>\n",
       "      <td>116.431818</td>\n",
       "      <td>1.049113</td>\n",
       "      <td>1.004197</td>\n",
       "      <td>1.000466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c.900A&gt;G (p.=)</th>\n",
       "      <td>1.091098</td>\n",
       "      <td>0.832673</td>\n",
       "      <td>0.988195</td>\n",
       "      <td>0.918345</td>\n",
       "      <td>1.134209</td>\n",
       "      <td>0.839646</td>\n",
       "      <td>91.650000</td>\n",
       "      <td>0.961886</td>\n",
       "      <td>0.953270</td>\n",
       "      <td>0.986927</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>73 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  DMSO Score 1, Variant level  \\\n",
       "genomic variant                                                 \n",
       "c.1126A>T (p.=), c.1127G>C (p.=)                     0.861514   \n",
       "c.1398C>T (p.=)                                      1.223792   \n",
       "c.1455C>T (p.=)                                      1.241292   \n",
       "c.1593G>A (p.=)                                      1.060335   \n",
       "c.1596C>A (p.=)                                      1.023199   \n",
       "...                                                       ...   \n",
       "c.3000A>G (p.=)                                      1.073204   \n",
       "c.3001A>T (p.=), c.3002G>C (p.=)                     0.960130   \n",
       "c.3025C>A (p.=), c.3027G>A (p.=)                     1.071434   \n",
       "c.3108C>T (p.=)                                      1.135469   \n",
       "c.900A>G (p.=)                                       1.091098   \n",
       "\n",
       "                                  DMSO Score 2, Variant level  \\\n",
       "genomic variant                                                 \n",
       "c.1126A>T (p.=), c.1127G>C (p.=)                     1.074013   \n",
       "c.1398C>T (p.=)                                      0.906745   \n",
       "c.1455C>T (p.=)                                      0.998782   \n",
       "c.1593G>A (p.=)                                      0.966782   \n",
       "c.1596C>A (p.=)                                      0.923394   \n",
       "...                                                       ...   \n",
       "c.3000A>G (p.=)                                      0.921730   \n",
       "c.3001A>T (p.=), c.3002G>C (p.=)                     1.011436   \n",
       "c.3025C>A (p.=), c.3027G>A (p.=)                     0.901525   \n",
       "c.3108C>T (p.=)                                      0.962758   \n",
       "c.900A>G (p.=)                                       0.832673   \n",
       "\n",
       "                                  VEM Score 1, Variant level  \\\n",
       "genomic variant                                                \n",
       "c.1126A>T (p.=), c.1127G>C (p.=)                    0.974284   \n",
       "c.1398C>T (p.=)                                     1.048542   \n",
       "c.1455C>T (p.=)                                     0.959970   \n",
       "c.1593G>A (p.=)                                     0.916403   \n",
       "c.1596C>A (p.=)                                     1.028119   \n",
       "...                                                      ...   \n",
       "c.3000A>G (p.=)                                     0.883162   \n",
       "c.3001A>T (p.=), c.3002G>C (p.=)                    0.927023   \n",
       "c.3025C>A (p.=), c.3027G>A (p.=)                    0.986006   \n",
       "c.3108C>T (p.=)                                     0.993668   \n",
       "c.900A>G (p.=)                                      0.988195   \n",
       "\n",
       "                                  VEM Score 2, Variant level  \\\n",
       "genomic variant                                                \n",
       "c.1126A>T (p.=), c.1127G>C (p.=)                    1.024429   \n",
       "c.1398C>T (p.=)                                     0.920296   \n",
       "c.1455C>T (p.=)                                     1.071859   \n",
       "c.1593G>A (p.=)                                     1.083860   \n",
       "c.1596C>A (p.=)                                     0.918473   \n",
       "...                                                      ...   \n",
       "c.3000A>G (p.=)                                     0.889270   \n",
       "c.3001A>T (p.=), c.3002G>C (p.=)                    1.029051   \n",
       "c.3025C>A (p.=), c.3027G>A (p.=)                    1.072690   \n",
       "c.3108C>T (p.=)                                     1.014727   \n",
       "c.900A>G (p.=)                                      0.918345   \n",
       "\n",
       "                                  LXH Score 1, Variant level  \\\n",
       "genomic variant                                                \n",
       "c.1126A>T (p.=), c.1127G>C (p.=)                    1.041329   \n",
       "c.1398C>T (p.=)                                     0.908997   \n",
       "c.1455C>T (p.=)                                     0.966379   \n",
       "c.1593G>A (p.=)                                     0.967772   \n",
       "c.1596C>A (p.=)                                     1.003361   \n",
       "...                                                      ...   \n",
       "c.3000A>G (p.=)                                     0.905588   \n",
       "c.3001A>T (p.=), c.3002G>C (p.=)                    0.945290   \n",
       "c.3025C>A (p.=), c.3027G>A (p.=)                    0.920885   \n",
       "c.3108C>T (p.=)                                     0.921778   \n",
       "c.900A>G (p.=)                                      1.134209   \n",
       "\n",
       "                                  LXH Score 2, Variant level  Averge Flag  \\\n",
       "genomic variant                                                             \n",
       "c.1126A>T (p.=), c.1127G>C (p.=)                    1.012745   113.750000   \n",
       "c.1398C>T (p.=)                                     0.912024   100.050000   \n",
       "c.1455C>T (p.=)                                     0.959167    57.720000   \n",
       "c.1593G>A (p.=)                                     1.039119    93.380000   \n",
       "c.1596C>A (p.=)                                     0.925967    78.918919   \n",
       "...                                                      ...          ...   \n",
       "c.3000A>G (p.=)                                     0.915866    87.189655   \n",
       "c.3001A>T (p.=), c.3002G>C (p.=)                    1.016869   111.000000   \n",
       "c.3025C>A (p.=), c.3027G>A (p.=)                    1.037558    79.941176   \n",
       "c.3108C>T (p.=)                                     1.079155   116.431818   \n",
       "c.900A>G (p.=)                                      0.839646    91.650000   \n",
       "\n",
       "                                  Average DMSO Score, Variant level  \\\n",
       "genomic variant                                                       \n",
       "c.1126A>T (p.=), c.1127G>C (p.=)                           0.967763   \n",
       "c.1398C>T (p.=)                                            1.065268   \n",
       "c.1455C>T (p.=)                                            1.120037   \n",
       "c.1593G>A (p.=)                                            1.013559   \n",
       "c.1596C>A (p.=)                                            0.973296   \n",
       "...                                                             ...   \n",
       "c.3000A>G (p.=)                                            0.997467   \n",
       "c.3001A>T (p.=), c.3002G>C (p.=)                           0.985783   \n",
       "c.3025C>A (p.=), c.3027G>A (p.=)                           0.986480   \n",
       "c.3108C>T (p.=)                                            1.049113   \n",
       "c.900A>G (p.=)                                             0.961886   \n",
       "\n",
       "                                  Average VEM Score, Variant level  \\\n",
       "genomic variant                                                      \n",
       "c.1126A>T (p.=), c.1127G>C (p.=)                          0.999357   \n",
       "c.1398C>T (p.=)                                           0.984419   \n",
       "c.1455C>T (p.=)                                           1.015915   \n",
       "c.1593G>A (p.=)                                           1.000132   \n",
       "c.1596C>A (p.=)                                           0.973296   \n",
       "...                                                            ...   \n",
       "c.3000A>G (p.=)                                           0.886216   \n",
       "c.3001A>T (p.=), c.3002G>C (p.=)                          0.978037   \n",
       "c.3025C>A (p.=), c.3027G>A (p.=)                          1.029348   \n",
       "c.3108C>T (p.=)                                           1.004197   \n",
       "c.900A>G (p.=)                                            0.953270   \n",
       "\n",
       "                                  Average LXH Score, Variant level  \n",
       "genomic variant                                                     \n",
       "c.1126A>T (p.=), c.1127G>C (p.=)                          1.027037  \n",
       "c.1398C>T (p.=)                                           0.910511  \n",
       "c.1455C>T (p.=)                                           0.962773  \n",
       "c.1593G>A (p.=)                                           1.003445  \n",
       "c.1596C>A (p.=)                                           0.964664  \n",
       "...                                                            ...  \n",
       "c.3000A>G (p.=)                                           0.910727  \n",
       "c.3001A>T (p.=), c.3002G>C (p.=)                          0.981080  \n",
       "c.3025C>A (p.=), c.3027G>A (p.=)                          0.979222  \n",
       "c.3108C>T (p.=)                                           1.000466  \n",
       "c.900A>G (p.=)                                            0.986927  \n",
       "\n",
       "[73 rows x 10 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Create new datframe containing only WT synonymous barcodes\n",
    "SynonDist_ratios = data[data['AA Variant'] == \"synon.\"]\n",
    "\n",
    "#Read in excel file originally created using Enrich2 that maps genomic variants to barcodes\n",
    "raw_barcodemap = pd.read_csv('/Users/jsimon/Documents/Lab/**RNABinderProject/SequencingRunFiles/PacBioSequencing (**Most files moved to google drive!)/MCP_Workup/Enrich2_GenerateMCPmap/tsv/t1_lib/raw_barcodemap.tsv', sep='\\t', \n",
    "                   dtype={\"Unnamed: 0\": \"string\"})\n",
    "\n",
    "raw_barcodemap = raw_barcodemap.rename(columns={'Unnamed: 0': 'BC', 'value': 'genomic variant'}).set_index('BC')\n",
    "\n",
    "#change barcode to reverse complement\n",
    "\n",
    "raw_barcodemap['RevComplement'] =''\n",
    "\n",
    "for i,row in raw_barcodemap.iterrows():\n",
    "    seq = i\n",
    "    newseq = seq.replace(\"A\", \"t\").replace(\"C\", \"g\").replace(\"T\", \"a\").replace(\"G\", \"c\")\n",
    "    newseq = newseq.upper() #change replaced letters to uppercase\n",
    "    newseq = newseq[::-1]  #reverse strand\n",
    "    raw_barcodemap.at[i, 'RevComplement'] = newseq\n",
    "    \n",
    "raw_barcodemap = raw_barcodemap.set_index('RevComplement')\n",
    "\n",
    "#merge data_SynonDist and raw_barcodemap dataframes\n",
    "SynonDist_ratios = SynonDist_ratios.merge(raw_barcodemap, left_index = True, right_index = True)\n",
    "    \n",
    "#Count number of barcodes per variant\n",
    "\n",
    "SynonDist_ratios['Number of Barcodes/Var'] = SynonDist_ratios['genomic variant'].map(SynonDist_ratios['genomic variant'].value_counts())\n",
    "    \n",
    "#Include only variants with 6 or more barcodes\n",
    "SynonDist_ratios = SynonDist_ratios[SynonDist_ratios['Number of Barcodes/Var'] != 0]\n",
    "SynonDist_ratios = SynonDist_ratios[SynonDist_ratios['Number of Barcodes/Var'] != 1]\n",
    "SynonDist_ratios = SynonDist_ratios[SynonDist_ratios['Number of Barcodes/Var'] != 2]\n",
    "SynonDist_ratios = SynonDist_ratios[SynonDist_ratios['Number of Barcodes/Var'] != 3]\n",
    "SynonDist_ratios = SynonDist_ratios[SynonDist_ratios['Number of Barcodes/Var'] != 4]\n",
    "SynonDist_ratios = SynonDist_ratios[SynonDist_ratios['Number of Barcodes/Var'] != 5]\n",
    "\n",
    "#Group by AA Variant\n",
    "SynonDist_ratios = SynonDist_ratios.groupby(['genomic variant'])['dmso1, WT normalized, BC level', \n",
    "                                                                 'dmso2, WT normalized, BC level',\n",
    "                                                                 'vem1, WT normalized, BC level',\n",
    "                                                                 'vem2, WT normalized, BC level',\n",
    "                                                                 'lxh1, WT normalized, BC level',\n",
    "                                                                 'lxh2, WT normalized, BC level',\n",
    "                                                                 'Averge Flag',\n",
    "                                                                  ].mean()\n",
    "\n",
    "SynonDist_ratios['dmso_Average'] = (SynonDist_ratios['dmso1, WT normalized, BC level']+SynonDist_ratios['dmso2, WT normalized, BC level'])/2\n",
    "SynonDist_ratios['vem_Average'] = (SynonDist_ratios['vem1, WT normalized, BC level']+SynonDist_ratios['vem2, WT normalized, BC level'])/2\n",
    "SynonDist_ratios['lxh_Average'] = (SynonDist_ratios['lxh1, WT normalized, BC level']+SynonDist_ratios['lxh2, WT normalized, BC level'])/2\n",
    "\n",
    "SynonDist_ratios = SynonDist_ratios.rename(columns={'dmso1, WT normalized, BC level': 'DMSO Score 1, Variant level', \n",
    "                                                    'dmso2, WT normalized, BC level': 'DMSO Score 2, Variant level',\n",
    "                                                    'dmso_Average':'Average DMSO Score, Variant level',\n",
    "                                                    'vem1, WT normalized, BC level': 'VEM Score 1, Variant level', \n",
    "                                                    'vem2, WT normalized, BC level': 'VEM Score 2, Variant level',\n",
    "                                                    'vem_Average':'Average VEM Score, Variant level',\n",
    "                                                    'lxh1, WT normalized, BC level': 'LXH Score 1, Variant level', \n",
    "                                                    'lxh2, WT normalized, BC level': 'LXH Score 2, Variant level',\n",
    "                                                    'lxh_Average':'Average LXH Score, Variant level',  \n",
    "                                                   })\n",
    "\n",
    "SynonDist_ratios\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:10: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
      "  # Remove the CWD from sys.path while we load stuff.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Score 1, WT normalized, Variant level</th>\n",
       "      <th>Score 2, WT normalized, Variant level</th>\n",
       "      <th>Average Score</th>\n",
       "      <th>DMSO Classification</th>\n",
       "      <th>VEM Score 1, WT normalized, Variant level</th>\n",
       "      <th>VEM Score 2, WT normalized, Variant level</th>\n",
       "      <th>Average VEM Score</th>\n",
       "      <th>LXH Score 1, WT normalized, Variant level</th>\n",
       "      <th>LXH Score 2, WT normalized, Variant level</th>\n",
       "      <th>Average LXH Score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Label</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Ala305Arg</th>\n",
       "      <td>0.944042</td>\n",
       "      <td>1.034068</td>\n",
       "      <td>0.989055</td>\n",
       "      <td>Wild Type-Like</td>\n",
       "      <td>0.953965</td>\n",
       "      <td>0.996661</td>\n",
       "      <td>0.975313</td>\n",
       "      <td>0.932003</td>\n",
       "      <td>0.996655</td>\n",
       "      <td>0.964329</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ala305Asn</th>\n",
       "      <td>0.966411</td>\n",
       "      <td>1.074007</td>\n",
       "      <td>1.020209</td>\n",
       "      <td>Wild Type-Like</td>\n",
       "      <td>1.000308</td>\n",
       "      <td>0.992863</td>\n",
       "      <td>0.996586</td>\n",
       "      <td>0.951516</td>\n",
       "      <td>1.046453</td>\n",
       "      <td>0.998985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ala305Asp</th>\n",
       "      <td>1.046501</td>\n",
       "      <td>1.025331</td>\n",
       "      <td>1.035916</td>\n",
       "      <td>Wild Type-Like</td>\n",
       "      <td>0.940486</td>\n",
       "      <td>1.067174</td>\n",
       "      <td>1.003830</td>\n",
       "      <td>0.978660</td>\n",
       "      <td>0.999502</td>\n",
       "      <td>0.989081</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ala305Cys</th>\n",
       "      <td>1.056967</td>\n",
       "      <td>1.014425</td>\n",
       "      <td>1.035696</td>\n",
       "      <td>Wild Type-Like</td>\n",
       "      <td>0.928084</td>\n",
       "      <td>0.987858</td>\n",
       "      <td>0.957971</td>\n",
       "      <td>0.991662</td>\n",
       "      <td>1.093855</td>\n",
       "      <td>1.042759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ala305Gln</th>\n",
       "      <td>1.037706</td>\n",
       "      <td>1.207888</td>\n",
       "      <td>1.122797</td>\n",
       "      <td>GOF</td>\n",
       "      <td>0.918543</td>\n",
       "      <td>1.131727</td>\n",
       "      <td>1.025135</td>\n",
       "      <td>0.962030</td>\n",
       "      <td>1.194157</td>\n",
       "      <td>1.078094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Val600Thr</th>\n",
       "      <td>1.940321</td>\n",
       "      <td>1.596814</td>\n",
       "      <td>1.768567</td>\n",
       "      <td>GOF</td>\n",
       "      <td>1.431835</td>\n",
       "      <td>1.433165</td>\n",
       "      <td>1.432500</td>\n",
       "      <td>1.655086</td>\n",
       "      <td>1.343315</td>\n",
       "      <td>1.499201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Val600Trp</th>\n",
       "      <td>1.458988</td>\n",
       "      <td>1.387623</td>\n",
       "      <td>1.423305</td>\n",
       "      <td>GOF</td>\n",
       "      <td>1.281489</td>\n",
       "      <td>1.337210</td>\n",
       "      <td>1.309349</td>\n",
       "      <td>1.355908</td>\n",
       "      <td>1.243161</td>\n",
       "      <td>1.299535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Val600Tyr</th>\n",
       "      <td>2.245811</td>\n",
       "      <td>2.023244</td>\n",
       "      <td>2.134528</td>\n",
       "      <td>GOF</td>\n",
       "      <td>1.433413</td>\n",
       "      <td>1.380769</td>\n",
       "      <td>1.407091</td>\n",
       "      <td>1.415518</td>\n",
       "      <td>1.252978</td>\n",
       "      <td>1.334248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>_wt</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>Wild Type-Like</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>synon.</th>\n",
       "      <td>1.031601</td>\n",
       "      <td>0.965145</td>\n",
       "      <td>0.998373</td>\n",
       "      <td>Wild Type-Like</td>\n",
       "      <td>0.955265</td>\n",
       "      <td>1.017139</td>\n",
       "      <td>0.986202</td>\n",
       "      <td>0.987269</td>\n",
       "      <td>0.986819</td>\n",
       "      <td>0.987044</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1597 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Score 1, WT normalized, Variant level  \\\n",
       "Label                                              \n",
       "Ala305Arg                               0.944042   \n",
       "Ala305Asn                               0.966411   \n",
       "Ala305Asp                               1.046501   \n",
       "Ala305Cys                               1.056967   \n",
       "Ala305Gln                               1.037706   \n",
       "...                                          ...   \n",
       "Val600Thr                               1.940321   \n",
       "Val600Trp                               1.458988   \n",
       "Val600Tyr                               2.245811   \n",
       "_wt                                     1.000000   \n",
       "synon.                                  1.031601   \n",
       "\n",
       "           Score 2, WT normalized, Variant level  Average Score  \\\n",
       "Label                                                             \n",
       "Ala305Arg                               1.034068       0.989055   \n",
       "Ala305Asn                               1.074007       1.020209   \n",
       "Ala305Asp                               1.025331       1.035916   \n",
       "Ala305Cys                               1.014425       1.035696   \n",
       "Ala305Gln                               1.207888       1.122797   \n",
       "...                                          ...            ...   \n",
       "Val600Thr                               1.596814       1.768567   \n",
       "Val600Trp                               1.387623       1.423305   \n",
       "Val600Tyr                               2.023244       2.134528   \n",
       "_wt                                     1.000000       1.000000   \n",
       "synon.                                  0.965145       0.998373   \n",
       "\n",
       "          DMSO Classification  VEM Score 1, WT normalized, Variant level  \\\n",
       "Label                                                                      \n",
       "Ala305Arg      Wild Type-Like                                   0.953965   \n",
       "Ala305Asn      Wild Type-Like                                   1.000308   \n",
       "Ala305Asp      Wild Type-Like                                   0.940486   \n",
       "Ala305Cys      Wild Type-Like                                   0.928084   \n",
       "Ala305Gln                 GOF                                   0.918543   \n",
       "...                       ...                                        ...   \n",
       "Val600Thr                 GOF                                   1.431835   \n",
       "Val600Trp                 GOF                                   1.281489   \n",
       "Val600Tyr                 GOF                                   1.433413   \n",
       "_wt            Wild Type-Like                                   1.000000   \n",
       "synon.         Wild Type-Like                                   0.955265   \n",
       "\n",
       "           VEM Score 2, WT normalized, Variant level  Average VEM Score  \\\n",
       "Label                                                                     \n",
       "Ala305Arg                                   0.996661           0.975313   \n",
       "Ala305Asn                                   0.992863           0.996586   \n",
       "Ala305Asp                                   1.067174           1.003830   \n",
       "Ala305Cys                                   0.987858           0.957971   \n",
       "Ala305Gln                                   1.131727           1.025135   \n",
       "...                                              ...                ...   \n",
       "Val600Thr                                   1.433165           1.432500   \n",
       "Val600Trp                                   1.337210           1.309349   \n",
       "Val600Tyr                                   1.380769           1.407091   \n",
       "_wt                                         1.000000           1.000000   \n",
       "synon.                                      1.017139           0.986202   \n",
       "\n",
       "           LXH Score 1, WT normalized, Variant level  \\\n",
       "Label                                                  \n",
       "Ala305Arg                                   0.932003   \n",
       "Ala305Asn                                   0.951516   \n",
       "Ala305Asp                                   0.978660   \n",
       "Ala305Cys                                   0.991662   \n",
       "Ala305Gln                                   0.962030   \n",
       "...                                              ...   \n",
       "Val600Thr                                   1.655086   \n",
       "Val600Trp                                   1.355908   \n",
       "Val600Tyr                                   1.415518   \n",
       "_wt                                         1.000000   \n",
       "synon.                                      0.987269   \n",
       "\n",
       "           LXH Score 2, WT normalized, Variant level  Average LXH Score  \n",
       "Label                                                                    \n",
       "Ala305Arg                                   0.996655           0.964329  \n",
       "Ala305Asn                                   1.046453           0.998985  \n",
       "Ala305Asp                                   0.999502           0.989081  \n",
       "Ala305Cys                                   1.093855           1.042759  \n",
       "Ala305Gln                                   1.194157           1.078094  \n",
       "...                                              ...                ...  \n",
       "Val600Thr                                   1.343315           1.499201  \n",
       "Val600Trp                                   1.243161           1.299535  \n",
       "Val600Tyr                                   1.252978           1.334248  \n",
       "_wt                                         1.000000           1.000000  \n",
       "synon.                                      0.986819           0.987044  \n",
       "\n",
       "[1597 rows x 10 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Create dataframe to use to plot replicate scores at the AA Variant Level\n",
    "#-----------------------------------------------------------------------------------#\n",
    "    \n",
    "#Include only variants with 3 or more barcodes\n",
    "Replicate_score_data = data [data ['Number of Barcodes/AA Var'] != 0]\n",
    "Replicate_score_data = Replicate_score_data [Replicate_score_data ['Number of Barcodes/AA Var'] != 1]\n",
    "Replicate_score_data = Replicate_score_data [Replicate_score_data ['Number of Barcodes/AA Var'] != 2]\n",
    "\n",
    "#Group by AA Variant\n",
    "Replicate_score_data = Replicate_score_data.groupby(['Label'])['dmso1, WT normalized, BC level', \n",
    "                                                               'dmso2, WT normalized, BC level',\n",
    "                                                               'vem1, WT normalized, BC level', \n",
    "                                                               'vem2, WT normalized, BC level',\n",
    "                                                               'lxh1, WT normalized, BC level',\n",
    "                                                               'lxh2, WT normalized, BC level',\n",
    "                                                               'Averge Flag'\n",
    "                                                              ].mean()\n",
    "\n",
    "#Rename columns\n",
    "Replicate_score_data = Replicate_score_data.rename(columns={\"dmso1, WT normalized, BC level\": \"Score 1, WT normalized, Variant level\", \n",
    "                                                            \"dmso2, WT normalized, BC level\": \"Score 2, WT normalized, Variant level\", \n",
    "                                                            \"vem1, WT normalized, BC level\": \"VEM Score 1, WT normalized, Variant level\", \n",
    "                                                            \"vem2, WT normalized, BC level\": \"VEM Score 2, WT normalized, Variant level\",\n",
    "                                                            \"lxh1, WT normalized, BC level\": \"LXH Score 1, WT normalized, Variant level\", \n",
    "                                                            \"lxh2, WT normalized, BC level\": \"LXH Score 2, WT normalized, Variant level\",                                                            \n",
    "                                                           })\n",
    "\n",
    "#Calculate Average score\n",
    "Replicate_score_data['Average Score'] = (Replicate_score_data['Score 1, WT normalized, Variant level'] + Replicate_score_data['Score 2, WT normalized, Variant level'])/2\n",
    "Replicate_score_data['Average VEM Score'] = (Replicate_score_data['VEM Score 1, WT normalized, Variant level'] + Replicate_score_data['VEM Score 2, WT normalized, Variant level'])/2\n",
    "Replicate_score_data['Average LXH Score'] = (Replicate_score_data['LXH Score 1, WT normalized, Variant level'] + Replicate_score_data['LXH Score 2, WT normalized, Variant level'])/2\n",
    "\n",
    "\n",
    "#Classify as GOF, LOF, or WT-like\n",
    "#Define cutoff: Calculate 2xSD of synonymous wild type distribution\n",
    "dmso_cutoff = 2*(SynonDist_ratios['Average DMSO Score, Variant level'].std())\n",
    "\n",
    "for i,row in Replicate_score_data.iterrows():\n",
    "    if row['Average Score'] > (1+dmso_cutoff):\n",
    "        Replicate_score_data.at[i, 'DMSO Classification'] = 'GOF'\n",
    "    elif row['Average Score'] < (1-dmso_cutoff):\n",
    "        Replicate_score_data.at[i, 'DMSO Classification'] = 'LOF'\n",
    "    else:\n",
    "        Replicate_score_data.at[i, 'DMSO Classification'] = 'Wild Type-Like'\n",
    "              \n",
    "Replicate_score_data = Replicate_score_data[['Score 1, WT normalized, Variant level', 'Score 2, WT normalized, Variant level', 'Average Score', 'DMSO Classification', 'VEM Score 1, WT normalized, Variant level', 'VEM Score 2, WT normalized, Variant level', 'Average VEM Score', 'LXH Score 1, WT normalized, Variant level', 'LXH Score 2, WT normalized, Variant level', 'Average LXH Score']]\n",
    "\n",
    "Replicate_score_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "Replicate_score_data.to_csv('Interaction CRAF_Replicate Score Data_frequency 0.000003_3BC minimum.tsv', sep='\\t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number (percentage) Wild Type-Like Variants: 693(43.39386349405135%)\n",
      "Number (percentage) Increased Interaction Variants: 822(51.471509079524104%)\n",
      "Number (percentage) Decreased Interaction Variants: 82(5.134627426424546%)\n"
     ]
    }
   ],
   "source": [
    "WTlike = Replicate_score_data[Replicate_score_data['DMSO Classification'] == 'Wild Type-Like']\n",
    "GOF = Replicate_score_data[Replicate_score_data['DMSO Classification'] == 'GOF']\n",
    "LOF = Replicate_score_data[Replicate_score_data['DMSO Classification'] == 'LOF']\n",
    "\n",
    "WTpercent = 100*(len(WTlike)/(len(WTlike) + len(GOF) + len(LOF)))\n",
    "GOFpercent = 100*(len(GOF)/(len(WTlike) + len(GOF) + len(LOF)))\n",
    "LOFpercent = 100*(len(LOF)/(len(WTlike) + len(GOF) + len(LOF)))\n",
    "\n",
    "print('Number (percentage) Wild Type-Like Variants: ' + str(len(WTlike)) + '(' + str(WTpercent) + '%)')\n",
    "print('Number (percentage) Increased Interaction Variants: ' + str(len(GOF)) + '(' + str(GOFpercent) + '%)')\n",
    "print('Number (percentage) Decreased Interaction Variants: ' + str(len(LOF)) + '(' + str(LOFpercent) + '%)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LinregressResult(slope=0.922637585269297, intercept=0.028623936877927525, rvalue=0.9820130525221374, pvalue=0.0, stderr=0.004441866756048077)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(style='white')\n",
    "\n",
    "#Plot replicate scores, DMSO\n",
    "\n",
    "myplot = sns.lmplot(data=Replicate_score_data, \n",
    "                    x=\"Score 1, WT normalized, Variant level\", \n",
    "                    y=\"Score 2, WT normalized, Variant level\", \n",
    "                    scatter_kws={\"color\":\"grey\", \"s\": 10, \"alpha\":0.2}\n",
    "                   )\n",
    "plt.title(\"CRAF Proximity Labeling, DMSO\", pad=20)\n",
    "myplot.set(ylim=(0, 6))\n",
    "myplot.set(xlim=(0, 6))\n",
    "plt.xlabel('Biological Replicate 1')\n",
    "plt.ylabel('Biological Replicate 2')\n",
    "\n",
    "\n",
    "print(stats.linregress(Replicate_score_data[\"Score 1, WT normalized, Variant level\"], \n",
    "                       Replicate_score_data[\"Score 2, WT normalized, Variant level\"]))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(style='white')\n",
    "\n",
    "#Plot non-synonymous and synonymous distributions\n",
    "\n",
    "synonVar = SynonDist_ratios['Average DMSO Score, Variant level']\n",
    "sns.distplot(synonVar, bins = 30, axlabel='Expression Score', hist=False, label = 'Synonymous')\n",
    "\n",
    "nonsenseScores = []\n",
    "missenseScores = []\n",
    "\n",
    "for i, row in Replicate_score_data.iterrows():\n",
    "    var = str(i)\n",
    "    score = row['Average Score']\n",
    "    if \"Ter\" in var:\n",
    "        nonsenseScores.append(score)\n",
    "    elif \"synon.\" in var:\n",
    "        continue\n",
    "    elif \"_wt\" in var:\n",
    "        continue\n",
    "    else:\n",
    "        missenseScores.append(score)\n",
    "        \n",
    "sns.distplot(nonsenseScores, bins = 100, axlabel='Score', hist=False, label = 'Nonsense')\n",
    "sns.distplot(missenseScores, bins = 1000, axlabel='Score', hist=False, label = 'Missense')\n",
    "\n",
    "plt.ylabel('Density')\n",
    "plt.xlabel('Score')\n",
    "plt.xlim([0, 6])\n",
    "#plt.ylim([0,5])\n",
    "\n",
    "#Plot BTK (background) score\n",
    "\n",
    "for i, row in Replicate_score_data.reset_index().iterrows():\n",
    "    if row['Label'] == 'BTK':\n",
    "        BTK_score = row['Average Score']\n",
    "\n",
    "plt.axvline(x=float(BTK_score), color = 'black', linestyle = 'dashed')\n",
    "plt.axvline(x=1+dmso_cutoff, color = 'grey', linestyle = 'dashed')\n",
    "plt.axvline(x=1-dmso_cutoff, color = 'grey', linestyle = 'dashed')\n",
    "\n",
    "plt.savefig('CRaf Interaction score distributions.svg')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(\n",
    "    data = Replicate_score_data,\n",
    "    x = 'DMSO Classification',\n",
    "    y = 'Average Score',\n",
    "    order = ['GOF', 'Wild Type-Like', 'LOF'],\n",
    "    palette = 'viridis_r',\n",
    "    alpha = 0.1\n",
    ")\n",
    "#plt.title('Interaction Classification')\n",
    "plt.xlabel('Classification')\n",
    "plt.ylabel('Average Interaction Score')\n",
    "\n",
    "#Plot BTK (background) score\n",
    "\n",
    "for i, row in Replicate_score_data.reset_index().iterrows():\n",
    "    if row['Label'] == 'BTK':\n",
    "        BTK_score = row['Average Score']\n",
    "        \n",
    "plt.axhline(y=BTK_score, color = 'grey', linestyle = 'dashed')\n",
    "\n",
    "plt.savefig('CRaf Interaction_waterfall plot.svg')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Heatmaps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Include only variants with 3 or more barcodes\n",
    "heatmap_data = data[data['Number of Barcodes/AA Var'] != 0]\n",
    "heatmap_data = heatmap_data[heatmap_data['Number of Barcodes/AA Var'] != 1]\n",
    "heatmap_data = heatmap_data[heatmap_data['Number of Barcodes/AA Var'] != 2]\n",
    "\n",
    "#Remove BTK\n",
    "heatmap_data = heatmap_data[heatmap_data['AA Variant'] != 'BTK']\n",
    "\n",
    "\n",
    "#remove wild type data\n",
    "heatmap_data = heatmap_data[heatmap_data['Mutation'] != 'wild type or synon.']\n",
    "\n",
    "\n",
    "#Change mutation to single letter abbreviations\n",
    "\n",
    "for i, row in heatmap_data.iterrows():\n",
    "    if row['Mutation'] == 'Arg':\n",
    "        heatmap_data.at[i, 'Mutation'] = 'R'\n",
    "    elif row['Mutation'] == 'His':\n",
    "        heatmap_data.at[i, 'Mutation'] = 'H'\n",
    "    elif row['Mutation'] == 'Lys':\n",
    "        heatmap_data.at[i, 'Mutation'] = 'K'\n",
    "    elif row['Mutation'] == 'Asp':\n",
    "        heatmap_data.at[i, 'Mutation'] = 'D'\n",
    "    elif row['Mutation'] == 'Glu':\n",
    "        heatmap_data.at[i, 'Mutation'] = 'E'\n",
    "    elif row['Mutation'] == 'Ser':\n",
    "        heatmap_data.at[i, 'Mutation'] = 'S'\n",
    "    elif row['Mutation'] == 'Thr':\n",
    "        heatmap_data.at[i, 'Mutation'] = 'T'\n",
    "    elif row['Mutation'] == 'Asn':\n",
    "        heatmap_data.at[i, 'Mutation'] = 'N'\n",
    "    elif row['Mutation'] == 'Gln':\n",
    "        heatmap_data.at[i, 'Mutation'] = 'Q'\n",
    "    elif row['Mutation'] == 'Cys':\n",
    "        heatmap_data.at[i, 'Mutation'] = 'C'\n",
    "    elif row['Mutation'] == 'Gly':\n",
    "        heatmap_data.at[i, 'Mutation'] = 'G'\n",
    "    elif row['Mutation'] == 'Pro':\n",
    "        heatmap_data.at[i, 'Mutation'] = 'P'\n",
    "    elif row['Mutation'] == 'Ala':\n",
    "        heatmap_data.at[i, 'Mutation'] = 'A'\n",
    "    elif row['Mutation'] == 'Val':\n",
    "        heatmap_data.at[i, 'Mutation'] = 'V'\n",
    "    elif row['Mutation'] == 'Ile':\n",
    "        heatmap_data.at[i, 'Mutation'] = 'I'\n",
    "    elif row['Mutation'] == 'Leu':\n",
    "        heatmap_data.at[i, 'Mutation'] = 'L'\n",
    "    elif row['Mutation'] == 'Met':\n",
    "        heatmap_data.at[i, 'Mutation'] = 'M'\n",
    "    elif row['Mutation'] == 'Phe':\n",
    "        heatmap_data.at[i, 'Mutation'] = 'F'      \n",
    "    elif row['Mutation'] == 'Tyr':\n",
    "        heatmap_data.at[i, 'Mutation'] = 'Y'   \n",
    "    elif row['Mutation'] == 'Trp':\n",
    "        heatmap_data.at[i, 'Mutation'] = 'W' \n",
    "    elif row['Mutation'] == 'Ter':\n",
    "        heatmap_data.at[i, 'Mutation'] = '*'\n",
    "        \n",
    "\n",
    "#restructure it to be in the correct form for a heatmap. Each value is the average ratio for that mutation\n",
    "#at that position\n",
    "\n",
    "heatmap_data_dmso = heatmap_data.groupby(['Position', 'Mutation'])['mean dmso, WT normalized, BC level'].mean()\n",
    "heatmap_data_vem = heatmap_data.groupby(['Position', 'Mutation'])['mean vem, WT normalized, BC level'].mean()\n",
    "heatmap_data_lxh = heatmap_data.groupby(['Position', 'Mutation'])['mean lxh, WT normalized, BC level'].mean()\n",
    "\n",
    "#restruture then transpose data so ORF position is on the x-axis\n",
    "heatmap_data_dmso = heatmap_data_dmso.unstack().transpose()\n",
    "heatmap_data_vem = heatmap_data_vem.unstack().transpose()\n",
    "heatmap_data_lxh = heatmap_data_lxh.unstack().transpose()\n",
    "\n",
    "# Define the desired order of columns\n",
    "desired_order = [8, 26, 80, 102, 189, 192, 211, 257, 258, 262, 294, 305, 318, 326, 332, 334, 341, 345, 347, 367, 385, 389, 443, 444, 447, 449, 453, 456, 462, 464, 466, 467, 468, 469, 471, 472, 485, 499, 501, 509, 518, 531, 539, 574, 581, 582, 584, 586, 587, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 614, 615, 616, 618, 636, 666, 671, 682, 695, 725, 726, 727, 735, 762]\n",
    "desired_order = list(map(str, desired_order))\n",
    "\n",
    "# Reorder the columns based on the desired order\n",
    "heatmap_data_dmso = heatmap_data_dmso[desired_order]\n",
    "heatmap_data_vem = heatmap_data_vem[desired_order]\n",
    "heatmap_data_lxh = heatmap_data_lxh[desired_order]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.LineCollection at 0x7fcec4a0bd50>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAB+MAAAJyCAYAAAAfEGIAAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAgAElEQVR4nOzdeZhddZkn8O+9N1WVpVIJEQnIvmgQAYmyDEKziIqDSpOgQyMTaG3BLTiiiKQFekDtID32iMRutpYlpmkbWnFrRwdFUaBFaO0WgbixarOYELKnlnvnD5oMIVVJIOdXdSt+Ps9Tz1M5597veXPq3nPPOe/9nVNrtVqtAAAAAAAAAACVqY90AQAAAAAAAACwpdGMBwAAAAAAAICKacYDAAAAAAAAQMU04wEAAAAAAACgYprxAAAAAAAAAFAxzXgAAAAAAAAAqJhmPAAAAAAAAAB/UGbPnp3Xv/71G3zMihUrcv755+eQQw7J9OnTc+qpp+aBBx7Y5GVoxgMAAAAAAADwB+MrX/lK/u///b8bfdwZZ5yR//N//k/OPPPMfOpTn8pjjz2Wk08+OcuWLduk5WjGAwAAAAAAAPAH4bHHHssnP/nJbLvttht83J133pnvf//7+dSnPpUZM2bkDW94Q66++uosW7Ys11133SYtSzMeAAAAAAAAgD8I55xzTg455JAcfPDBG3zcrbfemgkTJuSQQw5ZO23KlCk54IADcsstt2zSssZsVqUAAAAAAAAAMEKWLl2apUuXrje9p6cnPT0960y7/vrr8/Of/zxf//rXc9FFF20w9ze/+U123nnnNBqNdabvtNNO+eY3v7lJtW3Rzfi+R39dJHegZ8OXLHihlvXXiuQmSU+tt9K8RufYJMnK5voXV1i2um+z83u6yl20oWvlokrzGuOffhPXljy63rzmf/xys/PPP+QDm50xlA/+r5mV5o078PVJktYrj1xv3so1m/+66O4s97qoD2x+fYNpNjqK5JZUa7XKBLeaRWKbtcbGH7QZViyv/rWx7C/fXXlmkmzzyb8rkvuMVSv6K8kZP75zyHkrV1b7eVVC98Qy7+tS26FWvczuXqtWbr8lSZYvq359LP3EqZVnJsmjd/22SG6S7P8/31kkd+UvFxbJvfhDNxTJTZJZp+1fJHfqgXsVyf3y/9i0S5W9EMc//JMiuav+7twiuUnSPOG8IrkdX55bWdbYVx+19vf/+PFv1pn3wGVXVrKMg277fiU5g/n1O6vdt3/G2Mnji+SuXrKySG6S7P7W1xbJ7Tj0+CK5rYLHDK2u7iK595/xp0Vyu7d/cZHc+274aZHcJHnJq8ucI/rH6+8tkvvo6mr26Qdz8fKfFcltLHmkSO69Z364SG6STLv02iK5/Z1l3tONgTVFcpOk1Rj6+G9z1PrL1NzsGFskNyl3vqWv0Gmczma54/OBRleZ3ELruOS6KPUeSZJly8tt80uY8N15lWV1vOLQtb/Xpv2Xdeb191e3Xkqs44k//kLlmc+27ID/Xnnm2AnlWo0Tx48rlk1576ntMmzLesVnP5x589bfjsyePTunn3762n//9re/zdy5czN37txMmTJlo7nLly9Pd/f6+2ATJkzI8uXLN6m2LboZTzljup7eMe0ZZF4VzfjR5JlmfMavvzaqaMaPJuMPfMOQ86poxgNbhgkThj7oHg3NeAC2TM9uxu/6rN+T6prxAABAeR17/9GQ86psxgPt45RTTsmMGTPWm/7sUfGtVit//ud/nsMPPzxHH330JuW2NvBFr3p90waQasYDAAAAAAAAMCoNdjn651qwYEEWLlyYr33ta2u/mPNMs72/vz+NRiO151wNtLu7O488sv6VmlasWDHoiPnBaMYDAAAAAAAAsMX61re+lSeffDKHHnroevNe8YpXZO7cuZk5c91bwO266665/fbb02q11mnUP/jgg9l11103abma8QAAAAAAAABssc4///ysWLFinWmf+9zncu+992bevHnZYYcd1nvOoYcemksvvTS33XZbDjnkkCTJ4sWLc+edd+bd7373Ji1XMx4AAAAAAACAyjRqG3/McNptt93WmzZ58uR0dnZmn332SfJ0o/2hhx7KHnvske7u7hxwwAE58MAD86EPfShnnnlmJk+enEsuuSQTJ07MiSeeuEnL3bQ7ywMAAAAAAADAFup73/teTjjhhPz85z9fO23evHl57Wtfm4suuihnn312tt1221x99dWZNGnSJmUaGQ8AAAAAAABAZRq1NhsaP4gLL7xwnX/PnDlzvfvGT5o0KXPnzs3cuXNf0DLaqhk/a9as3HHHHetMq9VqGTduXHbZZZfMmjVrvRUAAAAAAAAAAO2mrZrxzxg/fnwmTpyYJGk2m3ny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TpsyZUoOOOCA3HLLLRtdppHxAAAAAAAAAFSm1qgN27KWLl2apUuXrje9p6cnPT09a/9dr9czbdq0JE/fO37RokX50pe+lNtuuy0XXHDBoNm/+c1vsvPOO6fRaKwzfaeddso3v/nNjdamGQ8AAAAAAADAqHTNNddk3rx5602fPXt2Tj/99EGf8+1vfzsf+MAHkiRHHHFEjj322EEft3z58nR3d683fcKECVm+fPlGa9OMBwAAAAAAAGBUOuWUUzJjxoz1pj97VPxz7bXXXvnCF76QhQsX5uKLL85pp52Wa6+9dr3HtVqtITPq9Y3fEWk5IEcAACAASURBVL5tm/E33XRTrr322tx7771ZuXJlpkyZkgMPPDDve9/7svvuu490eQAAAAAAAACMsOdejn5T7Ljjjtlxxx1zwAEHpLu7Ox/96Efzk5/8JNOnT1/ncd3d3XnkkUfWe/6KFSsGHTH/XBtv14+AL33pS3n/+9+fH/3oR1m1alW6u7vzxBNP5Otf/3pOOOGE3H///SNdIgAAAAAAAACDqNdrw/azqZYsWZIbb7wxjz322DrT99prryRZb3qS7Lrrrnn44YfXGyH/4IMPZtddd934etjk6obR3/zN3yRJ3vrWt+auu+7Kj370o3zjG9/IlClTsmzZslx11VUjXCEAAAAAAAAAo0Wz2czZZ5+dL37xi+tMv/XWW5MkL3vZy9Z7zqGHHpqlS5fmtttuWztt8eLFufPOO/Oa17xmo8tsy8vUP/7440mevqRAV1dXkmT33XfPueeem5/97GfZeeedR7I8AAAAAAAAAIZQa7TfmPApU6bk7W9/ey6//PKMHTs2++yzT+66665cdtlledvb3pbddtstixcvzkMPPZQ99tgj3d3dOeCAA3LggQfmQx/6UM4888xMnjw5l1xySSZOnJgTTzxxo8tsy2b8gQcemB/84Af5/Oc/n+9+97s58sgjc8ghh+S1r31tjjnmmJEuDwAAAAAAAIBRZs6cOdluu+1yww035JJLLsm2226b008/Pe9617uSJN/73vcyZ86cXHvttTnooIOSJPPmzcuFF16Yiy66KM1mM69+9avzmc98JpMmTdro8tqyGf8Xf/EXeec735mHHnooDzzwQK666qpcddVVmThxYk466aTMnj07HR0dI10mAAAAAAAAAKNER0dHTj311Jx66qmDzp85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VKZW8jYfo4i1AAAAAAAAAAAVMzIeAAAAAAAAgMrUGo2RLqEtGBkPAAAAAAAAABXTjAcAAAAAAACAirVVM37WrFmZNm1ajjrqqKxZs2adeWeffXamTZuWs88+e4SqAwAAAAAAAIBN01bN+Gc88sgjufzyy0e6DAAAAAAAAACep1qjPmw/7axtq7viiivy8MMPj3QZAAAAAAAAAPC8tW0zfs2aNZk7d+5IlwEAAAAAAADA81Cv14ftp521ZXV77713kuQ73/lObrnllhGuBgAAAAAAAACen7Zsxh9xxBE54ogjkiSf/OQn09vbO7IFAQAAAAAAAMDz0JbN+CQ555xz0tXVlQceeCBXXXXVSJcDAAAAAAAAAJusbZvxO+64Y971rnclSS699NI8+uijI1wRAAAAAAAAABtTa9SH7aedtXV17373u7PDDjtk5cqVuf3220e6HAAAAAAAAADYJG3djO/q6srHPvaxkS4DAAAAAAAAgE1kZPzT2ru6JK997Wtz5JFHjnQZAAAAAAAAAIxizWYz1113Xd7ylrdk+vTped3rXpe5c+dm+fLlQz7nzjvvzLRp09b7efe7373R5Y2psvhSPvaxj+W2227LmjVrRroUAAAAAAAAAEahK6+8Mp/5zGfyZ3/2Zzn44INz//3357Of/Wx+9atf5e/+7u8Gfc7ChQszfvz4XHXVVetM7+np2ejy2qoZP3/+/EGn77jjjvn3f//3Ya4GAAAAAAAAgC1Bq9XKlVdemRNOOCEf/vCHkySvec1rstVWW+WMM87Ivffem5e//OXrPe++++7LS1/60uy3337Pe5ltf5l6AAAAAAAAANgcK1asyLHHHps3v/nN60zfbbfdkiQPPfTQoM+79957M23atBe0zLYaGQ8AAAAAAADA6FarD9+Y8KVLl2bp0qXrTe/p6VnnUvLd3d0555xz1nvcTTfdlCTZY4891pvXbDbzy1/+MltttVVmzJiRX/7yl9l6661z8skn5x3veEdqtdoGa9OMBwAAAAAAAGBUuuaaazJv3rz1ps+ePTunn376Bp/7b//2b7n88svzute9Lrvvvvt68++///6sXr06999/fz70oQ9lq622yne+851cdNFFWb58eT7wgQ9sMF8zHgAAAAAAAIDK1BrDNzL+lFNOyYwZM9ab/uxR8YO566678p73vCc77LBDPvGJTwz6mKlTp+aKK67Iy1/+8rz4xS9Okhx88MFZvXp1rrjiirzzne9Md3f3kMvQjAcAAAAAAABgVHru5eg3xT//8z/n7LPPzi677JIrr7wyW2211aCP6+7uzmGHHbbe9COOOCLXX3997r///uyzzz5DLmeLbsZ3pFkkt9Ysk1vSinRWmte1gXljx2z+N12eWNm/2RlDmVTtqihux3EdxbI/O+0t+cDCrxXLf7bWRu6ZsSnqfasrqGRwfY0NvapfuDH1zf9/D6a3WW7z3ShUc6M2fN+Cq0rjqd8VyR37oue3U7Cpegu9jpOkUcF7eFOs6a/mM3ZcbaCSnMH01cq8/7oKreLaQJnP1Eb6M1DoNVdrldnXGtjj4DR+dXvluVe/b0Hlmc847ZjTiuQOrFhWJLeknl23LZK76K6f5UWvHvqA6YV6qq/cdqh/yk5Fcht9a4rkrtj2FUVyk+Spay6rLGuHV79pyHmdFe0fldq+JclP/tuJRXKn33B9JnVW/9pY1NmoPPMZU/adVia4XmYfoL5iUZHcJOmY8KIiuUsefKpI7ktXPFYk97c/LZObJPt94U+L5NZv+1KR3Dv//atFcpNkegodS/auKpI7+WU7FslNko6XTi+S2yp0vF5fvaJIbpL0d5U5/m00+4rkNhvlzsNNbCTL1hTYRyxUc6lz60mSVpnYxjDem7gqxXoY/YXOoxbaH0pS7LW83mKq2rdfs7ySnOdqPP6rIrlJUuscWywbRpurrroqn/rUp3LggQfmc5/7XCZOnDjkYxcuXJi77rorb3vb29LR8f+3VatXP72tHaqJ/4wtuhkPI21gdbmTsFV5suMllWW9uLIkAEaDFcvLnADrGV8kNkny5EsOLhfOqLX84HcUSL2kQCYAAKNZrbdA49UZ/mGxekWZL7p3TBh9XyAAGO2uv/76XHjhhTnmmGPyqU99Kp2dGx7F++CDD+b888/P1KlTc9RRR62d/s///M/ZYYcdsv3222/w+T6qAQAAAAAAAKjMcN4zflMtWrQon/zkJ7P99tvnpJNOyj333LPO/J122imdnZ351a9+lZ122ilTpkzJEUcckb333jvnnntuFi9enG233TZf+9rX8t3vfjeXXHJJahu5qqxmPAAAAAAAAABbtB/84AdZtWpVfvvb3+akk05ab/5FF12UbbfdNieffHLmzp2bmTNnprOzM1dccUU+85nPZN68eVm8eHFe+tKXZt68eXnd61630WVqxgMAAAAAAABQmXobjow/7rjjctxxx230cQsXLlzn31OmTMkFF1zwgpbZfmsBAAAAAAAAAEY5zXgAAAAAAAAAqJhmPAAAAAAAAABUrC3vGf/DH/4wCxYsyL/9279l6dKl6enpyb777pu3v/3tOeyww0a6PAAAAAAAAACGUKsbE560YTP+wgsvzFVXXZUkaTQamTRpUpYsWZKbb745N998c97xjnfk7LPPHuEqAQAAAAAAAGBobfWVhBtvvHFtI/6tb31rbrvtttx+++259dZbM3PmzCTJVVddlRtvvHEkywQAAAAAAACADWqrZvxll12WJJk+fXo+8YlPZPLkyUmSrbbaKp/85Cez7777Jkkuv/zyEasRAAAAAAAAgKHVGvVh+2lnbVPdY489lt/85jdJkmOPPTa1Wm2d+fV6Pccdd1yS5Ne//nUee+yxYa8RAAAAAAAAADZF2zTjH3300bW/77TTToM+5tnTNeMBAAAAAAAAaFdt04xvtVqD/v5sK1euHK5yAAAAAAAAAOAFGzPSBTxju+22W/v7Qw89tPb3VatWZdy4cUmSBx98cO30qVOnDl9xAAAAAAAAAGySdr+X+3Bpm7UwderU7LrrrkmSr371q2tHx7///e/PrFmzct999+WGG25Ikuyyyy6a8QAAAAAAAAC0rbZpxifJaaedliT56U9/mnPPPTdLlizJ/vvvn3vuuSfHHXfc2pHxp5566kiWCQAAAAAAAMAQavX6sP20s7a5TH2SzJw5M/fcc0/mz5+f66+/Pl/+8pfT3d2d5cuXr33MuHHjsssuu4xckQAAAAAAAACwEW33VYFzzjknl19+eY488shMmjQpy5cvz5QpU3L44Ydn//33z6pVq3LSSSflyiuvHOlSAQAAAAAAAGBQbTUy/hmHH354Dj/88PWmt1qt/MM//EOuueaavOlNbxqBygAAAAAAAABg49qyGT+UWq2WE088MSeeeOJIlwIAAAAAAADAIOqNxkiX0Bba7jL1AAAAAAAAADDajaqR8QAAAAAAAAC0t1rDmPDEyHgAAAAAAAAAqJxmPAAAAAAAAABUbIu+TH29b1Wx7NaYrmLZJUxIb8WJ44ec89Sagc1O32ZCwZdm/+bXt6nGVfD/mP3tuRVUMrjarvslA49XmDhxyDn1gb7NTm81OjY7Yyhj0iyS29cs852nRq1WJDdJGgNrygQ3y7z3agN9aXWMK5LdGjepSG69o8w2bky94OtizfLqwsaNHXpWq5rPq756uc/peqH3X723wnX8LKX2WVr1MZnYXSQ6zULreOlnP1Ikd9VAq0hukrTGDP1+2Rwdu+xZJPe9b3t5kdwk2eaDHy+SO2bRA8lTP688d/YT/1555lorFxWJ7X/0oSK5Yye/pEhukoyb+bZi2c82889fX01Qof2hJJl+w/VFch/7q48Wyd3t01cWyU0KfvZVcEwzmFpHmW19kvQV+oja/y9nF8ltdm9dJPe/fr5MvUnSGjv0cXA7ev99Xy2W3VfocKRv0vZFcse/cVaR3CRp1sqcCxholnlTN1plzokkSbNVqOYiqUmtUL1JUmv2p2foU6ovXKH9i3qz0PmhPH08WUJnoddyq2NcOrrL1FwbqPq8/TO5/UVym50TiuQmSbOruuwNbYWr+riqNcus4zW7/pciuUnS9ftfFsktdj45SVJuXxmGyxbdjC9p6cqRruD56bG9ArZgy5aX2fmd1FkkFgAAAAAA+AOgGQ8AAAAAAABAZWoNd0tP3DMeAAAAAAAAACpnZDwAAAAAAAAAlanVjQlPNqMZ//DDD+fBBx9Mb29vWq3WoI856qijXnBhAMD/Y+/Ow+Qq67zhf6t6SdLpLJCwyBYQtZVgXCAgiyJEVkVJHIfHiYLiPoaZeQCX8UF8J6ODIjoumR0HgUFkUWAGFyAgm4CsymgAdeIQAsgWSMje3VXvHw4ZsnY6OXe6O3w+11XX1XVO1ff8Uqk6dc751X0OAAAAAAAwVPW7Gf/MM8/k1FNPzW233bbexzSbzdRqtdx///2bVRwAAAAAAAAADEX9bsZ/9atfza233pqXv/zlOeCAAzJq1KjUarUStQEAAAAAAADAkNTvZvx1112XvfbaK5deemlaWlpK1JQkuf7663PhhRfml7/8ZZYsWZLtt98+b37zm/PRj34022+/fbHlAgAAAAAAALDpai2uGZ9sQjN+yZIlOeigg4o24v/mb/4m5513XpKkXq+no6MjjzzySC688ML8+Mc/ziWXXJJddtml2PIBAAAAAAAAYHP0+ycJr3jFKzJ37twStSRJrrzyylWN+A9/+MO5++67c/fdd+fb3/52Ojs78/TTT+fzn/98seUDAAAAAAAAsOlqLfUtdhvM+l3dxz72sdxwww255pprStSTf/mXf0mSHHrooTn11FPT0dGRJDnggANyyimn5NBDD83+++9fZNkAAAAAAAAAUIV+n6Z+zpw56erqyp//+Z9n1113ze6775729va1Hler1fLNb36zX9lPPvlkfvOb3yRJDj/88LXmT58+PdOnT+9vyQAAAAAAAACwRfW7GT9r1qxVf8+bNy/z5s1b5+NqtVq/i3nsscdW/b3jjjv2+/kAAAAAAAAAMBj0uxl/3XXXlagjSdJoNFb93Ww2iy0HAAAAAAAAgDJq9cF9Lfctpd/N+J133rlEHUmS7bffftXfLxwl/7z58+dn4cKFmThxYrEaAAAAAAAAAGBz9bsZ/7z58+fniiuuyIMPPphly5Zl7NixefnLX55jjjkmu+666yZl7rTTTtltt90yb9683HDDDXnXu9612vxzzz03//Zv/5ZXvvKVufzyy1P3iwoAAAAAAACAQaVWbxnoEgaFTepmX3TRRTnqqKMya9asXHvttbnlllty1VVX5W//9m9zzDHH5Lvf/e4mF/TBD34wSTJ79uzMmjUry5cvT5L84Ac/WJW7//77a8QDAAAAAAAAMGj1e2T8rbfempkzZ2b8+PH56Ec/mn322Sfbb799Fi1alDvvvDN/93d/l5kzZ2bPPffM5MmT+13Q8ccfn1/+8pe55JJL8s1vfjN///d/n2HDhmXp0qVJkr333jt/9md/1u9cAAAAAAAAANhS+t2MP+ecczJq1KhcdNFF2WWXXVZN33bbbbP77rvnDW94Q975znfmW9/61iY145Pkr//6r3PAAQfkoosuypw5c9JoNPKKV7wixxxzTN773vems7Nzk3IBAAAAAAAAYEvodzP+vvvuy+GHH75aI/6Fdt1110yZMiU/+clPNquwY445Jsccc8xmZQAAAAAAAADAQOh3M767uzsdHR0bfExHR8eqa70DAAAAAAAA8CJSbxnoCgaFen+f8NKXvjQ333zzepvty5Yty0033ZQ99thjs4sDAAAAAAAAgKGo3834d73rXZk3b17+7M/+LI888shq837729/mT//0TzN//vz80R/9UWVFAgAAAAAAADBE1Otb7jaI9fs09e9+97vzs5/9LFdffXXe8pa3ZIcddsioUaPyxBNPZNGiRWk2mzniiCMyffr0EvUCAAAAAAAAwKDX72Z8rVbL1772tVx55ZW5/PLL88ADD+Spp57KyJEjs99++2Xq1Kk57rjjStQKAAAAAAAAAENCrdlsNge6iFJWLnyqSG6jfWSR3GatViQ3SZZ1NyrN23ZUx3rnPfbsks3OHzu8ZbMz1qfes6LSvGGdY9Y7b8Vzz1ayjNovr6skZ00tY8ZVm7fXm9c7b+VT8zc7v7dz/GZnrM9QWxPWU67g5b1lskc0lhfJTZJFK9qK5I4Y2e/frG2UxsVnFslt/T+fKZJbtY4Rw9c7b+myat4nSyr+3nuhzvYypz2qFVoRNVJm+6Klt9rv0xdqe+I3xbKfvOy8yjPPn3l15ZnP+4u51xTJ/f03/rpIbpIs+PWjRXK7F68skts6osy6/sk5ZfZFkuTQa88vkttz301Fcttf8boiuc9rLFlUSU7ra45Y77xvbfvKSpbxnoduryRnXVoXPFQkt7ngsSK5D194YZHcJGlpK/O53uH0bxTJLWllrcxr8Z9HH1kkN0n2+eEPKs/8885XV575vK8v/s9i2Y3rzq08s/vpct9PpfZHWpeUqbllydNFcpNk8exLi+QOf9cpRXJrzXL7T816mfVQkqRe/fHD5f0fu7bR6oUO/ZY7opy0d2/+cd51abYOK5Jb6nuvvdlTJDcp9xlpnXN9kdyevQ4rkpskLb+8trKstslvX++8hUuWVbKM4b3V5Kyp5Dq5vvSZIrm9o3cskpskw0aOKpZNeUu/d/YWW1bHO0/bYsvqrz7X9IsXL057e3va29tX3d9YnZ2dm15ZBRauLPOlPqq9SOxWo7WCBsjigk2U0SOKRRez8GXrPzC4ObZ98u4iuQAwWNXf/zeVZ76vQOYqzXIHiUvZ6e8uKZL70InOvsW6PbPTAZXkbFdJCrC5Fi0d6AoGj8UHvL/yzGFXfbnyTBgoJdYX7esff/SiVOr4+uiCv9EAYPCotZQbeDuU9Pm1N3ny5Hz84x/PjBkzkiT77rtvahsxgrtWq2XOnDmbXyEAAAAAAAAADDF9NuP33Xff7LLLLqvuT548uWhBAAAAAAAAAAxhBS4pMxT12Yy/4IILNngfAAAAAAAAAFhdvb9PmDVrVu68884NPuYnP/lJPvvZz25yUQAAAAAAAAAwlG1SM/6OO+7Y4GNuvPHGXHnllZtcFAAAAAAAAAAMZX2epv7CCy/MZZddttq0iy66KLNnz17n47u7uzN37tzVrjMPAAAAAAAAwIuEa8Yn2Yhm/Dve8Y783d/9XRYsWJAkqdVqeeqpp/LUU0+tO7C1NS95yUvy//7f/9vkou65556cd955ueeee/LMM89k7NixmTBhQt75znfmHe94R1pa/OcBAAAAAAAAsPEajUYuvvjifOc738n8+fMzbty4TJkyJSeffHI6OzvX+Zyenp7MmjUrl19+eZ599tlMnDgxn/70pzNp0qQ+l9dnM76zszO33nrrqvuvfOUrM2PGjMyYMaMf/6yNd8455+QrX/lKGo1G6vV6xo4dm2eeeSZPPvlk7rrrrtx000356le/mnq932fYBwAAAAAAAOBF6pxzzsnXvva1fOADH8gBBxyQ3/3ud/nGN76R3/72t/nWt761zud84QtfyOWXX57TTjstO+20U84999y8733vy5VXXpldd911g8vrd0f7/PPPz9SpGbAFpgAAIABJREFUU/v7tI1y44035uyzz06j0ci0adPy05/+NLfddlvuvPPOfOQjH0mS/OhHP8r1119fZPkAAAAAAAAAbJ5avb7Fbhur2WzmnHPOyfHHH59TTz01Bx54YKZPn57Pfe5zueWWW3L//fev9Zz58+fn4osvzqc+9am85z3vyWGHHZZvfetbGTNmTM4555w+l9nnyPg17bfffhuc39PTk2effTY33nhj3vnOd/Yr+x/+4R/SbDbT1dWVL3zhC6tGv3d0dOSUU07JuHHjst1222Wvvfbqb9kAAAAAAAAAvEgtWbIkb3/723P00UevNv2lL31pkmTevHl51atetdq822+/Pb29vTnyyCNXTWtvb8+b3/zm3HDDDX0us9/N+N7e3nzlK1/JVVddlQULFqS3t3e9j+1PM37BggW59957Vz1vXaehP/HEE/tbLgAAAAAAAABbqUWLFmXRokVrTR89enRGjx696n5nZ2dOP/30tR43e/bsJMnLXvaytebNnTs3Y8aMybbbbrva9AkTJuTRRx/N8uXLM3z48PXW1u9m/DnnnJN//dd/TXt7eyZMmJCHHnoo22yzTUaNGrVqgePGjVt1WvmN9dhjj636e7fddlv194033pjPfvazqz32ta99bb7xjW/0t3QAAAAAAAAAtiLnnXdeZs2atdb0GTNm5OSTT97gc3/xi1/kn//5n/OWt7wle+6551rzFy9enM7OzrWmjxw5MskfRttX2oz/j//4j4wZMyb//u//nh122CHvf//7M27cuJx99tlZsWJFPv/5z+eyyy5b5y8HNlZLS8uqv5ctW5bHH398tfnPPPPMJmcDAAAAAAAAUFC9pe/HVOTEE6dn6tSpa01/4aj4dbn77rvz0Y9+NLvssks+//nPr/MxzWZzg9NrtdoGl7HxV7T/H/Pnz88RRxyRHXbYIUny6le/OnfddVeSZNiwYfmrv/qr7L777vn2t7/dr9ydd955VbFz585dNf2oo47Kgw8+mAcffHCdLyIAAAAAAAAAL06jR4/OLrvsstZtQ834H/7wh3n/+9+fl7zkJfn2t7+dbbbZZp2P6+zszJIlS9aa/vy0dY2af6F+N+OTrHZO/N133z2PP/74qvPw1+v1HHzwwfntb3/br8yxY8dmn332SZJceeWV67wW/YauTw8AAAAAAADAIFBv2XK3fjr33HNzyimn5LWvfW0uvPDCbL/99ut97Etf+tI8++yzWbhw4WrTH3rooeyyyy5pb2/f8MvQ3+J22mmn/O53v1t1//nru//6179eNa21tTULFizob3Q+/vGPp1arZc6cOfnkJz+Zp556KkmyaNGinH322bnqqqv6nQkAAAAAAAAAl156ab74xS/m6KOPzjnnnJNRo0Zt8PEHHnhgkuTqq69eNW3lypW58cYbV83bkH5fM/6QQw7JBRdckO9973s57rjjstdee2X48OG58MILs++++2bRokWZPXv2qtPY98eBBx6YT3ziE6sa7z/84Q8zduzYLFy4cNWo+La2thx11FH9zgYAAAAAAACgvFp9k07QXtTTTz+dL3zhC9l5550zffr0zJkzZ7X5u+22W9rb2/Pb3/42u+22W7bddtvsvPPOmTp1aj7/+c9n6dKlmTBhQs4999wsXLgwH/zgB/tcZr+b8R/+8Idz7bXX5vTTT09vb2/++I//OH/8x3+c8847L3feeWdWrFiRxYsX5+STT+5vdJLkAx/4QCZPnpzvfOc7ueOOO/Lkk09m5MiR2WOPPXLwwQfn+OOP36RGPwAAAAAAAAAvTjfffHOWLVuWRx55JNOnT19r/llnnZUdd9wxJ5xwQs4888xMmzYtSTJz5syMHj06//zP/5ylS5dm4sSJOffcczNhwoQ+l9nvZvw222yTK664It/5zncyadKkJMmpp56alStX5gc/+EGGDRuWd73rXfnQhz7U3+hVJk2atCobAAAAAAAAADbHcccdl+OOO67Pxz344IOr3W9vb89nPvOZfOYzn+n3MvvdjE+Szs7OfPjDH16tgM997nP53Oc+t2rasmXL0tbWtinxAAAAAAAAADCk9ftk/VOmTMn555+/wcfMmjUrhx566CYXBQAAAAAAAMAQVW/ZcrdBrM+R8fPnz8/ixYtX3X/kkUcyd+7cPPDAA+t8fHd3d2677bYsX768uioBAAAAAAAAYAjpsxn/i1/8IqeeempqtVqSpFar5eKLL87FF1+83uc0m80cdNBB1VUJAAAAAAAAwNAwyEesbyl9NuPf+ta3Zs6cOVmwYEGazWauuOKKvPKVr8yrXvWqdT6+ra0t22+/faZPn155sQAAAAAAAAAwFPTZjE+ST3ziE6v+vuOOOzJt2rSccMIJxYqqyqjOjfrn9duilY0iuaOGlfuFyKhlT1QcuPt6Z2275L8qWcSCkXtWkrOmZr3M+2JdPr/dPpud0fY/Z6Uo4Y/ete4f1Wyqvc5/83rnrewYt9n5JX9DVaslzWb1uS29K6oPTbK42VYk93kt5d52Q0pryqzvc/ynsvLiL1Ue2yjxJv4f9YLrohfqrejfMLy1XL0resq8L9pb6kVyS2l5ruJtixfoGb1jsewU+Jj8/E1vrj70fxx2zbeL5P7m3/+zSO68R55L/mG/Itkvfdk2RXJ3P6yrSO6rv3Z2kdwkmfOC/bMq/e6GeUVyd3zN9kVyk2TENsMry9ruoh+ud94Bb3t5NQu5+wfV5KzDU3fcXiT3sZ/9ukju2JeVW9fv9H/eXSR3Wa3MvmRbyc2sQpuHtUI7DC89alIa536m8txvPn5D5ZnPa3n8wSK58/7pm0Vytzn5k0Vyk6Sx/Nkiub2d44vkti54qEhuknRMKrM9tKJ1RJHctkLHLpKk2TqsWPaozuozGym3Um5pdBfJ7a2XO0Y0srNMdrPZWyS31Hfq8ma548mlPiE9ex1WJLfWvaxIbpI0V26ZSx8/t6Ka99+wEWXWyeWO7iX1uXcVye0du2uRXNha9Ptb5Prrry9RB8CAW7K4+p2i0WW2yYrrXlb9TlF3yv6AYKhZ8bbqGylD9O3GFlBi/dZeeSIAULW2WvLc4p6BLgMAAOBFq9/N+Ouuu26jHztlypT+xgMAAAAAAADAkNfvZvzHP/7x1DbyVLX3339/vwsCAAAAAAAAYOiqtZS8+PDQUVkzftmyZZk3b15uvPHGvOY1r8mJJ55YSYEAAAAAAAAAMNT0uxl/8sknb3D+nDlz8id/8id57rnnNrkoAAAAAAAAAIaoen2gKxgUKn8V9tprrxx11FH513/916qjAQAAAAAAAGBIKPKThG222SYPPfRQiWgAAAAAAAAAGPT6fZr6vixYsCBXX311tttuu016/nvf+97ccccdq+7XarW0trZm7NixOeSQQ/LJT34yY8aMqapcAAAAAAAAAKhcv5vxM2bMWOf0ZrOZpUuX5r777svSpUvz8Y9/fLMK6+joyKhRo9Lb25tFixblySefzGWXXZZf//rXueSSS1Kr1TYrHwAAAAAAAIAC6i0DXcGg0O9m/OzZszc4f8yYMXnf+96Xj33sY5tcVJJMnTo1Z5xxRpJk5cqV+fKXv5zzzz8/9913X+699968/vWv36x8AAAAAAAAACil38346667bp3Ta7Va2traMm7cuNTr1V6Kvr29Pccff3zOP//8JMljjz1WaT4AAAAAAAAA1agZGZ9kI5rxjz766Gr3N3R6+O7u7vz+979fdX+nnXbajNL+14oVK3Luueeuur/rrrtWkgsAAAAAAAAAJfTZjD/ssMM26frstVotc+bM2aSikuTyyy/P7Nmz09PTk4ULF6anpydJcsABB2TSpEmbnAsAAAAAAAAApW30aeo7Ojqy7777prW132e23yRLly7N0qVLU6/XM2zYsOyyyy459thj84EPfGCLLB8AAAAAAAAANlWfnfX3vOc9ufbaa/P444/n3nvvzWGHHZajjjoqBx10UNra2ooVNn369JxxxhnF8gEAAAAAAAAooF4f6AoGhT6b8aeffnpOP/303Hvvvbn66qtzzTXX5Morr0xnZ2emTJmyRRrzAAAAAAAAADCUbPQ551/3utflda97XT796U/nvvvuy49//ONce+21ueKKK9LZ2ZlDDz00Rx99dA4++OC0t7eXrBkAAAAAAACAQapWbxnoEgaFTboA/KRJkzJp0qR88pOfzK9+9atVI+b/4z/+IyNHjsyhhx6ao446Km95y1uqrhcAAAAAAAAABr3NPln/xIkTc8opp+THP/5xLr300rz85S/PVVddlZNPPrmK+gAAAAAAAABgyNmkkfEvtHjx4txwww255pprcvPNN2fZsmVp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XT3h7y8pktv23IYPgG2q4R/7y3TffFmR7FLbWg+eMqNI7uuOfGle+aWzimQ3ho9JsrDy3NpzPZVnPq85rLNIbq13ZZHceneZ44bNto7UGmVe50ah/dR6b3eR3KGovrz6z93z/vC5rt6IIfZ+qzXL9BmSpFALIyPu+2Gq7Qj8QeO1xxRI/YP60oLHL16go3tRJTmltg3rK5ekMaLMZ682rKNI7nM7vnqDvQEYrObOnZuPfOQj6enp+3vpgQceyIQJE3LWWatvS48fP77P5w6tI6hbuVKN+KGoVCN+KCrViAeAzTLEGvEllWrED0WlGvFJctdZ38+rrrq68twxv72m8swkxRrxQ1GpRvxQVKoRD2xYqUb8UFSqET9ULVxZolWVbFMktZxSjXiGtlKNeGDDSjXigf/V09OTiy++OF/5ylfS1rZxP+R68MEHM3HixLz2ta/t9/K0PAEAAAAAAADY6t199905++yzc9JJJ+W0007bqOc88MAD6erq2qTlGdIEAAAAAAAAQHUKXpJrTYsWLcqiRWtfhmL06NEZPXr0atP23HPPzJ49O+PGjcv3v//9PrOfeOKJPP3005kzZ06OOuqoPPzww9lll13ysY99LMcdd1yfz9eMBwAAAAAAAGBIOu+88zJr1qy1ps+YMSMnn3zyatM25jrvL/TAAw8kSebPn59PfOITGTZsWK644op86lOfSm9vb975zndu8Pma8QAAAAAAAABUp1bbYos68cQTM3Xq1LWmrzkqflPsvffe+cd//MdMnjw5nZ2dSZKDDz44Tz/9dL7+9a9rxgMAAAAAAACwdVrX6eirsu222+bQQw9da/ohhxySW2+9NQsWLMi222673udvuZP1AwAAAAAAAMAQce+99+bSSy9da/qKFSvS2tqaUaNGbfD5mvEAAAAAAAAAsIaf//znOf3001ddOz5JGo1Grr766rz+9a9PW1vbBp8/6JrxRx99dLq6unLCCSesc/6HPvShdHV1rfO8/wAAAAAAAAAMsHp9y90qtGDBgvz85z/P4sWLkyTTpk3LzjvvnBkzZuSqq67KT37yk3zkIx/Jr3/965x22ml9vwyVVleBt73tbUmSO++8M0899dRq85577rncdtttqz0OAAAAAAAAADbXDTfckOOPPz6/+tWvkiRjxozJBRdckEmTJuXMM8/MX/zFX2Tp0qX59re/nde85jV95rWWLri/jj322HzjG99YNbx/+vTpq+Zdd9116e7uTq1Wy1vf+tYBrBIAAAAAAACAdWnWBt2Y8LVMmzYt06ZN63PazjvvnK9+9aubtIxB9yrstttuq35F8KMf/Wi1eddcc02SZPLkydlxxx23eG0AAAAAAAAAsDEGXTM++d9T0N9999154oknkiRLlizJLbfcstp8AAAAAAAAABiMBmUz/phjjklLS8uqU9UnyY033pgVK1akra0tRx555ABXCAAAAAAAAADrNyib8ePHj88BBxyQ5H9PVf98U/7ggw/O2LFjB6w2AAAAAAAAADagVt9yt0Fs0Fb3/Kno77nnnjz00EO56aabkiTHHnvsQJYFAAAAAAAAAH0atM34ww8/PMOHD0+z2czpp5+epUuXpqOjI4cddthAlwYAAAAAAADA+hgZn2QQN+M7Ozvz5je/OUlyxx13JEmmTJmSESNGDGBVAAAAAAAAANC3QduMT9Y+Jb1T1AMAAAAAAAAwFAzqZvyb3vSmjBkzJkkyduzYHHTQQQNcEQAAAAAAAAD0rXWgC9iQ9vb2VaeoBwAAAAAAAIChYlA34wEAAAAAAAAYYmqD+gTtW4xXAQAAAAAAAAAqZmQ8AAAAAAAAAJVpGhmfxMh4AAAAAAAAAKjcVj0yvrdZJrd15eIywb0ry+QmybBh5bILWF7qPy/JiHq57DU1R2+/2RmN3kYFlaxHT8H33Bq6t9zLvknaamVy62mmkULhhTTrLUVyayuWFMntHb1jRpVaxTXLfP5aR5QpuFEr83+XJC1b6G3cbFazsmhp9FSSsy699bZi2UXUy2zuNdpGFMlNklqhz96EN+1WJHfpVb8pkpsk9RVltjsbw0cVyX36oYVFcpPk2LsuSVbMqzx35aO/qzwzSVr2nlIkN0nqy8u8zqW2Oput5fZFVj63tFj2C+1+0gmV5NRWPFdJzros+O4/F8n9yZNlXuOfjN0333j2riLZpba/64X22eu95bZb6m0dxbJLuP7gaUVyD/nah4rkJkljWJnv1O4l3UVyGyPHFclNyr0Wrc/OL5Lbs81uKVNxkgWFcgvtrzcLbX8nSb23zHu5WWg/p76yzLGLJKllRaHgMuPtagX3q0tZ0VPmvTxy6RNFcpOkI8nSkTtUnlvffVLlmUnS7F5WJDdJep58pLKs9lesf16zouMZzULHOluf/K8iuUnSXLm8SO7wDL31BWxJW3UzHmAwWLK4+h3PkZ1DrBkIAABrWLiyzA81RrYXiWUNJfZzAODFaOXS6huZIytPBGBTacYDAAAAAAAAUB3XjE/imvEAAAAAAAAAUDkj4wEAAAAAAACoTq020BUMCkbGAwAAAAAAAEDFNOMBAAAAAAAAoGKa8QAAAAAAAABQMdeMBwAAAAAAAKA6NWPCkyE0Mv6www5LV1dXvvWtbw10KQAAAAAAAACwQUOmGQ8AAAAAAAAAQ4XT1AMAAAAAAABQmabT1CcxMh4AAAAAAAAAKqcZDwAAAAAAAAAV04wHAAAAAAAAgIq5ZjwAAAAAAAAA1akbE54YGQ8AAAAAAAAAlTMyHgAAAAAAAIDq1IwJT4yMBwAAAAAAAIDKacYDAAAAAAAAQMU04wEAAAAAAACgYkPmmvHXX3/9QJcAAAAAAAAAQF9cMz6JkfEAAAAAAAAAULkhMzIeAAAAAAAAgCHAyPgkRsYDAAAAAAAAQOU04wEAAAAAAACgYlv1aepHtJb5rUFvrbNIbq3ZLJKbJM3ectlrqtc2P6PgS5Faz/Jy4QU0G+VejPrKJcWy19SWxuaHFDylSU+hl7m1lozqrH5VW1+5uPLM5/W0l1nHNUeMKZJb6+0ukpsky2rtRXIfvfEXRXL3mF4kNknZ9fILDavou7u7UcGX0Xq0psyLUWo91KyX2dxr1luK5CbJ8p4y/3/dS1YWyW2plXu/NYaPLpJba/QUye0YPaxIbpL0jtm5SO6wifsXyc0j/5menV9dJru3zP9f28QDi+T2FtzmbGnbMru0tV1eVUlO78hxleSsy8M3zimSe+QOI4vkHvPrm5MU2o7r7k5vW0flsS0Lf195ZpKsfMleRXKTpNBmS1qXPJUxBb7+DvnFT6sPTZIbLyiTm6T1N2Vq7nxJmW2Ahz4zIxP+ZlaR7BXNMvvsLW0jyuQuKvOZTpJGqfV9o7dMbktbmdwkvfUy2Y1CO6ltreW2Z1Pq+EWhfb40KziWt77oljLHW4YnWV7gOPjyzh0qz3xee2NlRldx3HQNjeVl1p0lj8/WWsu8L9a0sLeaz8zoMTtVkrOmxgO3F8lNkraddi8TXHB9AVuDrboZDwAAMFAWLS/zo5USDTDY2ixZXH3Do2B7pphaLVn8XPWvhfXQ0Lawp8yPbNq3TA8FYIO6l1X/o5WWkdooAGw63yIAAAAAAAAAVKZZ8GwaQ4lXAQAAAAAAAAAqZmQ8AAAAAAAAANUxMj6JkfEAAAAAAAAAUDnNeAAAAAAAAAComGY8AAAAAAAAAFRsUDbj3/ve96arqyszZ84c6FIAAAAAAAAA6I9abcvdBrFB2YwHAAAAAAAAgKGsdaALAAAAAAAAAGArUjMmPDEyHgAAAAAAAAAqpxkPAAAAAAAAABXTjAcAAAAAAACAirlmPAAAAAAAAACVabpmfBIj4wEAAAAAAAB4kbn//vszceLE/P73v9/g45YsWZK/+qu/ykEHHZTXve51+dCHPpT//u//3qhlaMYDAAAAAAAAUJ1afcvdNsHcuXPzkY98JD09PX0+9v/+3/+bH//4xznttNPypS99KY8//nhOOOGEPPfcc30+d1Cfpr6npydLlixZa3pbW1va29sHoCIAAAAAAAAAhqKenp5cfPHF+cpXvpK2trY+H3/XXXflxhtvzL/8y7/kTW96U5Jk3333zZQpU3LRRRflwx/+8AafP6hHxl988cV5/etfv9bty1/+8kCXBgAAAAAAAMAQcvfdd+fss8/OSSedlNNOO60Fx2lGAAAgAElEQVTPx//0pz/NyJEjc9BBB62atu2222by5Mm56aab+nz+oB4ZDwAAAAAAAADrs2jRoixatGit6aNHj87o0aNXm7bnnntm9uzZGTduXL7//e/3mT137txMmDAhLS0tq03fbbfd8qMf/ajP5w/KZvwFF1ww0CUAAAAAAAAAMMidd955mTVr1lrTZ8yYkZNPPnm1aePHj+9X9uLFi9PZ2bnW9JEjR2bx4sV9Pn9QNuMBAAAAAAAAGJqatdoWW9aJJ56YqVOnrjV9zVHxm6LZbK53Xr3e9xXhNeMBAAAAAAAAGJLWdTr6qnR2dmb+/PlrTV+yZMk6R8yvqe92PQAAAAAAAABspGZzy91K2mOPPfLwww+vNUL+oYceyh577NHn8zXjAQAAAAAAAGANBx98cBYtWpRbb7111bQFCxbkrrvuyoEHHtjn8zXjAQAAAAAAAHjRW7BgQX7+859n8eLFSZLJkydnv/32yymnnJJLL7001157bd73vvdl1KhRefe7391n3lZ9zfgl3Y0iuaPaakVym7UyuUkyotZTLHtNLVX8M+rlXouUeVus0/Kxu212xtKnllVQybo161tuFVBrbP57sLdlWAWVrFupt1yt0V0kt9E+skhukhRbFTULffjqLWVykwyvlTm/zQ77vbJIbsnT8fSWPtfP/1jZW81yKvku2sJ6GmVe47ZCn5GSb4kRKbPuHLP7DkVyH1k2t0hukjRb2ork1lcuLpLbWNlbJDdJ6nNuKJLbu+e+RXJrjZ6MbT5dJrunzGekd/6DRXJrI8YUyU2S0Xu8pFj2C9WeeaSaoJHjqslZh50OfEWR3D2PnVwkN7VyYwNqvSszpq36feDGyG0rz0ySevfyIrnPGz28+szWJx6tPjTJykKfkdaX7F4kN0mWvOyNRXJ3f9/SIrnNV7whyZIy2Y0Cb7YkzZZCxy7aO8rkFtTbWuY1bil07CJJ6imz49DSU+Z4WRXHr9an2VrmuFatZ0WR3GbbiCK5SdJTaH+yXqtlZGf1+1Alj4k0W9qL5LYtLPNd3bPt5h/vXp+WbbYrlv1CFR16SsviJ6sJWjN3p92L5CZJo2Nskdzuepn3cZKU6wjA+t1www35y7/8y5x//vnZf//9kySzZs3KF7/4xZx11llpNBrZZ5998rWvfS1jxvR9zGOrbsYDAAAAAAAAsGU1ttAAr80xbdq0TJs2rc9pY8aMyZlnnpkzzzyz38twmnoAAAAAAAAAqJiR8QAAAAAAAABUZvCPi98yjIwHAAAAAAAAgIppxgMAAAAAAABAxTTjAQAAAAAAAKBirhkPAAAAAAAAQGUaLhqfZJCMjD/ssMPS1dWVrq6uvO1tb1tt3r333rtqXldXV775zW8OUJUAAAAAAAAAsHEGRTP+hX7zm9/kqaeeWnX/jjvuGMBqAAAAAAAAAKD/BlUzvq2tLUly++23r5r2s5/9bLV5AAAAAAAAAAxezWZzi90Gs0HVjN97772TJLfddluSpLu7O/fcc0/a2tryqle9aiBLAwAAAAAAAICNNqia8ZMnT07yvyPjf/GLX2TZsmXZe++9M3z48IEsDQAAAAAAAAA22qBqxu+xxx4ZP3585s+fn4cffnjVKer322+/Aa4MAAAAAAAAADbeoGrGJ8k+++yT5A+j459vxu+7774DWRIAAAAAAAAAG6nR3HK3wWzQNeOfHwV/00035ec//3laWlry+te/foCrAgAAAAAAAICN1zrQBazp+VHws2fPTqPRyKtf/ep0dnYOcFUAAAAAAAAAbIxBPmB9ixl0I+O7uroyZsyYNBqNJMnkyZMHuCIAAAAAAAAA6J9B14yv1WqrnZZeMx4AAAAAAACAoWbQNeOT/71ufL1ezz777DPA1QAAAAAAAABA/wyKa8Zff/31q90/6aSTctJJJ6027YILLtiSJQEAAAAAAACwCRouGp9kkI6MBwAAAAAAAIChbFCMjAcAAAAAAABg69BsGhqfGBkPAAAAAAAAAJXTjAcAAAAAAACAimnGAwAAAAAAAEDFtuprxo9pLC6S2+wu87K1PzW3SG6SPLPdXpXmDdvAvOW9m38NiJKXkaitWFIufA0jnvz1Zmdst9f4CipZj5a2ctkF1Ju9xbK7C/02qV4r9JunZqNMbpKW5c8Vya0vebpIbu+YnYvkJklPS5n1/aL//n2R3M6e5UVyk6S7vqE1f3VaatXktDVWVhO0Ds2W9iK5Hd2LiuSWqrd1ZcHv00LruGf+q8xn72UvGVkkN0nqyxcWyW3W6qkVeJ3bRpZ5vyXJL8/8+yK5e134vSK5rY8/WCQ3SVb88tYiue0vm1Qkt7dteJHcJOlesqxY9gv17rx3JTklPnfPe+TmB4rkbv+a3Yrk5qKzyuQm6TxmepHcxvAxRXJTq2gDaB1KbQcsuu6KIrk//esPFsl95bRqj4ms7l8z/m/OrTy157HfVZ6ZJO077lEkN0mWbfeKIrkjHvnPIrmNbXctkpskjZHjiuS2rii0z9Babn+v1rOiTG6h79Rm24giuSU1ho0qklsvuM/XVqorUeiYcq3gMdRab3eR3MawMvuppd5vSZKC66IXGjOspZKcRmuZbcPuzu2L5CZJ28JHyuT2lNwvG3rrZVjTVt2MBwaPRcs2vyk9qlyvAwBedBYM332gSwCArcLKpT2VZ5b7eRsAAGwZ5X6OPrQ4TT0AAAAAAAAAVMzIeAAAAAAAAAAqU/KS1EOJkfEAAAAAAAAAUDHNeAAAAAAAAAComGY8AAAAAAAAAFTMNeMBAAAAAAAAqEzDNeOTDNJm/Hvf+97ccccd651/5plnZtq0aVuwIgAAAAAAAADYeIOyGf+8jo6OjBo1aq3pI0aMGIBqAAAAAAAAAOhLs2lofDLIm/FTp07NGWecMdBlAAAAAAAAAEC/1Ae6AAAAAAAAAADY2mjGAwAAAAAAAEDFBnUz/sILL0xXV9dqty984QsDXRYAAAAAAAAA69HYgrfBbFBfM76joyOjRo1abdro0aMHqBoAAAAAAAAA2DiDuhk/derUnHHGGQNdBgAAAAAAAAAbqdkc6AoGh0F9mnoAAAAAAAAAGIo04wEAAAAAAACgYprxAAAAAAAAAFAxzXgAAAAAAAAAqFjrQBewLhdccMFAlwAAAAAAAADAJmg0mwNdwqBgZDwAAAAAAAAAVGxQjowHAAAAAAAAYGgyLv4PjIwHAAAAAAAAgIppxgMAAAAAAABAxTTjAQAAAAAAAKBiW/c14xs9RWKbw0YVye0ZvWOR3CSpFUteW0/v5l8ForWlXMX1FYuLZa+pZ5tdNztjyRNLKqhk3epLFlQbuN1u6501YuTmr25qjZWbnbE+7c0yVy9ptg4rkttT8GIrbe0ji+Q2esusk9NslMlN0tYsU/PYPXcuklvSsC308716rZr1f29Lmc9ektQLXe2o2TaiSG4pzZYy64okSW93kdhf/eShIrkjCm63NEutk0eOy+gCuZfNebJA6h98bOL4IrkPvP+P88pzLymSPdSs+M/biuS27rx3kdwkaR9dcF30ArXlz1WS0xgxppKcdVm5pMy68/7v/aJI7qtPGF4kN0k6Ro4rE1xqe7bRWyY3yYpCX1H3/sN1RXI7xpfZHtrlHccUyU2SxZP/qEhuraPEN3Xym7/+XJHcJNnj6xcUyW12blskt/vGct//7QceWyS3d+wuRXJLrodWFto3ayt0vKXWW+7YU61nRZngeplD/I1C+yJJudei1PstjXIH4oZ1LyuS2+jcrkhufUU128Xr0hhW3XtuQ4exWnqref+Veh8vabQVyU2S0Q/cXiZ48tvL5DLkFVx9DilbdzMeAACgD4uWFggd1VUg9A86c2uxbAAAAACqoxkPAAAAAAAAQGUKnZB4yHHNeAAAAAAAAAComGY8AAAAAAAAAFRMMx4AAAAAAACAF4Wrrroqb33rWzNp0qQcffTRueKKKzb4+CuvvDJdXV1r3WbOnNnnslwzHgAAAAAAAIDKNDI4Lxr/ox/9KKeddlpOOOGEvPGNb8zs2bPzqU99KsOHD89RRx21zuc88MADmTBhQs4666zVpo8fP77P5WnGAwAAAAAAALDV++pXv5qjjz46n/nMZ5Ikb3zjG7Nw4cJ8/etfX28z/sEHH8zEiRPz2te+tt/LG1SnqW82m/mTP/mTdHV1Zb/99sszzzyz2vx58+Zl7733TldXV84444wBqhIAAAAAAACA9Wk2t9xtYz388MOZN29ejjjiiNWmH3nkkZk7d24efvjhdT7vgQceSFdX1ya9DoOqGV+r1TJz5sy0tbWt+gXCC33pS19Kd3d3xo8fn9NOO22AqgQAAAAAAABgMFi0aFHmz5+/1m3RokWrPW7u3LlJkj322GO16RMmTEiS/O53v1sr+4knnsjTTz+dOXPm5KijjsrEiRNz5JFH9nmd+ecNqmZ8krzsZS/LSSedlCS55JJL8uCDDyZJfvazn2X27NlJkk9/+tMZPXr0gNUIAAAAAAAAwMA777zzMmXKlLVu55133mqPe+6555IknZ2dq00fOXJkkmTx4sVrZT/wwANJkvnz5+cTn/hE/umf/n/27jw+yurQ//gn+55Awr4lbAlbQsIOYa0WEUELLqCiFTestlUslsq1Klz12lq16r1Vu1wr1Ip4UUQgyCJrWEJYAwTIAkmEhDUkJJlkkpn5/cFvpgGCkGQOMPb7fr14vXQSvnM4z3nOOc9znuVD4uPjmTlzJgsXLrxi2W7Id8Y/+eSTLFu2jIKCAl599VX+/ve/81//9V8ADBkyhPHjx1/nEoqIiIiIiIiIiIiIiIiIyPX205/+lAkTJlzy+cU3dzv+/zPtvby86vzc2/vS+9h79erFBx98QP/+/V2L+EOHDuX06dO888473Hnnnd9bthvuzniAwMBAXnrpJeD8HfFPP/00mZmZBAQE8PLLL1/fwomIiIiIiIiIiIiIiIiIyA0hPDycdu3aXfLn4sX4sLAw4NI74MvLyy/4eW2RkZGMGjXqkrvpR4wYwfHjxzlz5sz3lu2GXIwHGDZsGGPHjgVgxYoVAEybNs31zH4REREREREREREREREREbnx2B3X7s/Vcr4rPj8//4LP8/LyLvh5bTt37uTzzz+/5POqqip8fX3rXMCv7YZdjAeYNWuW6x/QsWNHHnvssetcIhERERERERERERERERER8TTR0dG0a9eO5cuXX/D5ihUriImJoU2bNpf8nV27dvHCCy+43h0PYLfb+eabb+jTpw9+fn7f+5035DvjnZo3b0737t1JS0tjyJAh+Pv7X+8iiYiIiIiIiIiIiIiIiIjI93DU4471a+mpp57i+eefJyIigpEjR/Ltt9+SkpLC22+/DcCZM2fIz8+nS5cuhIaGMnHiRObNm8fPf/5znnnmGUJCQvjnP//JoUOH+OSTT674fTf0nfEiIiIiIiIiIiIiIiIiIiLuMHHiRGbPns3GjRt56qmnSEtL43e/+53r9elr165l0qRJ7Nu3D4CIiAjmzZtHQkIC//Vf/8UzzzxDRUUFf//73+ndu/cVv++GvjNeRERERERERERERERERETEXSZPnszkyZPr/NnEiROZOHHiBZ+1bduWt956q0HfpTvjRURERERERERERERERERE3Ex3xouIiIiIiIiIiIiIiIiIiNvYuUFfGn+N3fCL8fPmzbveRRAREREREREREREREREREamXG34xXkREREREREREREREREREPIdDN8YDeme8iIiIiIiIiIiIiIiIiIiI22kxXkRERERERERERERERERExM20GC8iIiIiIiIiIiIiIiIiIuJmeme8iIiIiIiIiIiIiIiIiIi4jV0vjQd+4IvxtuDI612EeqkJaWYsO6Sm0s2JwZf9SWRQ45uVzeQOWl5sLvsiviVHG51hKXb3tqvFy8tc9kVq7I3fpn4m24W3j7lsA/xqLObCffyMxDqCIvCylLg91+dwutsza7N1Gez2zFN7st2eCdDe0LYDcFyj/sLHXu2eILvNPTl1cdiNxPqUnzaSaw8MM5JrksM30EjuUUuNkdwx47sYyQXwqjbT3/sU5xvJNam6zGokt+cXS43k7hp7i5FcgI/X5BnJnfmrYUZyW98eYiQXwMvbsx725l1VZiy7OPeskdxdp830Q93LzR3nOHz8zQQbGp+83H68XotPkJHY9snRRnJ9AgOM5J5ct8FILkBw/7uM5NpLzMwNO73+30ZyAUwdsXuVnjSS6z/4NiO5AHiZGZ9MzQ3BXN/pY+hY0stdx44X59rM5BplqL15W8uN5ALY/Q3NDz1wzcceYOaY3dT2s/qbO8cQVHjAfWFtu1/+Z27aZxx+ZuZZ3mZOOwHg0yXRSK7N0LkykR+KH/RivIiI3FhKHBFuz2zq9sQLlVYY/gIRERG54Z31ds+F0024dhcGiwAEWUsoqTF3QYyI/HCUVpq5SSEk1EisyDVXWW7m4m6/UC3RiIj80KmnFxERERERERERERERERERt7HpoQkAeNYz/URERERERERERERERERERDyAFuNFRERERERERERERERERETcTIvxIiIiIiIiIiIiIiIiIiIibqZ3xouIiIiIiIiIiIiIiIiIiNvYHY7rXYQbgu6MFxERERERERERERERERERcbPrthg/fvx44uLieOGFFy74/IknniAuLo64uDjmz5/v+txut9O3b1/i4uL4+9//fo1LKyIiIiIiIiIiIiIiIiIiV8PmcFyzPzey67YY36dPHwB2797t+sxms5Genu76/23btrn+Oycnh7KyMgD69et3jUopIiIiIiIiIiIiIiIiIiJSf9dtMb5v374AZGdnU15eDsDevXs5d+6c63fS0tJc/71r1y4AQkJC6N69+zUsqYiIiIiIiIiIiIiIiIiISP1ct8V4593tdrudjIwMADZv3gycX6j38vLixIkT5OXlAbBnzx4AkpKS8PHxuQ4lFhERERERERERERERERERuTrXbTG+TZs2tG7dGvjXQrtzMf7WW2913f3uvDveeWe8HlEvIiIiIiIiIiIiIiIiInLjsjsc1+zPjey6LcbDhe+Nr6qqYufOnQAMHjyYQYMGAeffG19eXk5OTg6gxXgREREREREREREREREREbnxXdfFeOd743fv3s2OHTuoqqqiefPmdOnShcGDBwPnF+P37t2LzWbD39+fhISE61lkERERERERERERERERERH5Hjb7tftzI7shFuNPnjzJwoULAVx3xPfr1w8/Pz+OHTvG0qVLAYiPjycgIOD6FFZEREREREREREREREREROQqXdfF+NjYWMLCwgBYtmwZgOuO+ODgYHr37g3AokWLAD2iXkREREREREREREREREREPMN1XYz39vYmMTERAJvNBvzrznj418J8VVUVoMV4ERERERERERERERERERHxDNd1MR7+9ah6gOjoaNq2bev6/9oL897e3vTp0+ealk1ERERERERERERERERERKQhfK93AWrf7V578R2gd+/eBAcHU1FRQbdu3QgNDb3WxRMRERERERERERERERERkXqwOxzXuwg3hOu+GN+/f38OHjxY58/8/PzYuXPnNS6RiIiIiIiIiIiIiIiIiIhI41z3xXgREREREREREREREREREfnhsOnOeOAGeGe8iIiIiIiIiIiIiIiIiIjID40W40VERERERERERERERERERNxMi/EiIiIiIiIiIiIiIiIiIiJupnfGi4iIiIiIiIiIiIiIiIiI29j1yngAvBwOxw+2KiyVlde7CPXiW1pkNN8e1MRtWQFhl8/aV1ja6HybwWYZ4Ovl1ry4FuGX/Vn11kWNzvf+nrputLAot8b5tI+/7M9KP3qx0fn26ppGZ1xOTWWVkdzgtq2N5NorK4zkApQeLjSSG9Ak1Eiu5eRZI7kATbtFG8ktPpBnJPds9jEjuQDnCsvcljX423WX/Zll0dtu+Q5Hlbk5QNWZEiO5AZERRnJrKixGcqvLzeQChHTqZCTXXn7OSK5XQKCRXICynMNGckM7dzSS66i2GskFyE/ZaCS37fBEI7mZ/1xvJBfAYTMzV7ZZbUZyayrNzeGyss64LeuRMwcu+7MnvGLc9j3iudoEmrmf4ZjBfcTTNA/wMZJ7sspM/wbQPsjPSG65zW4k94yhvl7khyI5KshYdlGlmf0vp9zcHFzOiwk209cD9O1w+XPLjVFVYqZdFFvNzVuSbnHfuYBenyy97M8si991y3d4B4e5Jedi9goz5y4A/Np2NpJbFjfKSC5Ak9BgY9li3qqsk9fsu27u2vyafVd9/aDvjC87V329i1AvBpdcASitdN9BbXMz44yIiIiIiIiIiIiIiIiIeDibbo0H9M54ERERERERERERERERERERt9NivIiIiIiIiIiIiIiIiIiIiJtpMV5ERERERERERERERERERMTNftDvjBcRERERERERERERERERkWvL7tA740F3xouIiIiIiIiIiIiIiIiIiLid7owXERERERERERERERERERG3senGeEB3xouIiIiIiIiIiIiIiIiIiLidxyzG//a3v+XRRx+93sUQERERERERERERERERERG5ohv+MfWrVq2iqqqKpk2bUl1dzZ49e8jJyWHChAnXu2giIiIiIiIiIiIiIiIiIiJ1uuEX47ds2cInn3yCv78/Pj4+fPnll8TFxWkxXkREREREREREREREREREblg3/GPqX3jhBb788ku8vb2xWCy88847LF68+HoXS0RERERERERERERERERE6mB3OK7ZnxvZDX9nfGlpKb/85S8ZOHAgLVq04JVXXqFPnz60aNHiehdNRERERERERERERERERESkTjf8Ynx4eDj33XcfP/rRjwgNDaVDhw5ERUVd72KJiIiIiIiIiIiIiIiIiEgdbPYb+471a+WGX4wHeOihh1z//eijj16/goiIiIiIiIiIiIiIiIiIiFyFG/6d8SIiIiIiIiIiIiIiIiIiIp5Gi/EiIiIiIiIiIiIiIiIiIiJu5hGPqRcREREREREREREREREREc9gd+id8aA740VERERERERERERERERERNxOd8aLiIiIiIiIiIiIiIiIiIjb2HRjPKA740VERERERERERERERERE5N/EkiVLuO2220hISODWW29l0aJF3/v75eXlzJ49m+TkZJKSknjsscc4cuTIVX2XFuNFREREREREREREREREROQHLyUlhRkzZpCcnMz//M//MGDAAGbOnMny5csv+3emT5/O8uXLmTFjBr/73e84fvw4Dz74IOfOnbvi9+kx9SIiIiIiIiIiIiIiIiIi8oP31ltvceuttzJr1iwAhg0bRklJCe+88w5jxoy55PfT09NZt24df/nLXxg+fDgA/fr146abbuLTTz/l8ccf/97v053xIiIiIiIiIiIiIiIiIiLiNnaH45r9uVoFBQXk5+czevToCz6/5ZZbyM3NpaCg4JK/k5qaSkhICMnJya7PIiMj6d+/P+vXr7/id+rOeBERERERERERERERERER8UilpaWUlpZe8nl4eDjh4eGu/8/NzQWgY8eOF/xedHQ0AIcPH6Z9+/YX/Cw3N5fo6Gh8fHwu+LxDhw6kpKRcuXAOcZSUlDjeffddR0lJicdke1quyWxPyzWZ7Wm5JrM9Lddktqflmsz2tFyT2Z6WazJbueazPS3XZLan5ZrM9rRck9melmsy29NyTWZ7Wq7JbE/LNZmtXPPZnpZrMtvTck1me1quyWxPyzWZ7Wm5JrM9LddktqflmsxWrvlsT8s1nS3/3t59911HbGzsJX/efffdC37v66+/dsTGxjoKCgou+PzIkSOO2NhYx9KlSy/Jfvjhhx1Tpky55PO33nrLkZCQcMWyaTHe4XAUFBTUWfE3cran5ZrM9rRck9melmsy29NyTWZ7Wq7JbE/LNZntabkms5VrPtvTck1me1quyWxPyzWZ7Wm5JrM9Lddktqflmsz2tFyT2co1n+1puSazPS3XZLan5ZrM9rRck9melmsy29NyTWZ7Wq7JbOWaz/a0XNPZ8u+tpKTEUVBQcMmfiy/8WLx4sSM2Ntbx3XffXfD54cOHHbGxsY6UlJRLsqdOnXrZxfjExMQrlk2PqRcREREREREREREREREREY908ePoLycsLAyAsrKyCz4vLy+/4Oe1hYaG8t13313yeXl5OaGhoVf8Tu8r/oaIiIiIiIiIiIiIiIiIiIgHc74rPj8//4LP8/LyLvj5xX+noKAAh8Nxyd+p6/cvpsV4ERERERERERERERERERH5QYuOjqZdu3YsX778gs9XrFhBTEwMbdq0ueTvDB06lNLSUjZt2uT67MyZM6SnpzNkyJArfqceUy8iIiIiIiIiIiIiIiIiIj94Tz31FM8//zwRERGMHDmSb7/9lpSUFN5++23g/EJ7fn4+Xbp0ITQ0lP79+zNgwACeffZZZsyYQZMmTXjvvfcICwvj3nvvveL3+bz88ssvG/43eYSAgAAGDhxIQECAx2R7Wq7JbE/LNZntabkmsz0t12S2p+WazPa0XJPZnpZrMlu55rM9Lddktqflmsz2tFyT2Z6WazLb03JNZntarslsT8s1ma1c89melmsy29NyTWZ7Wq7JbE/LNZntabkmsz0t12S2p+WazFau+WxPyzWdLXI1unfvTvPmzfnqq6/47LPPKCsr4ze/+Q3jx48HICUlhSeeeIKhQ4fSrl07AG666SaOHj3KvHnzWLlyJbGxsfzhD3+gdevWV/w+L8fFD7gXERERERERERERERERERGRRtE740VERERERERERERERERERNxMi/EiIiIiIiIiIiIiIiIiIiJupsV4ERERERERERERERERERERN9NivMh1VlFRQXp6urF8h8NhLNsUu93u1jyr1crx48fdmlmbJ9axqTJ7Ul3U1NRQUlLi9tyqqgqeXxoAACAASURBVCqys7PdngtgsVjIyMhwe66pugCzbc1ke3N3tsl2YXq/86T92iR3j00mmeornDSGmOWJfbJJJvt7T6sPk+W12WzGsj2N+vt/8bR9BMyV2US7MH2c6m6m2xuY2X4m27En9RemuXscsVqt5OXluTXzWjHVjj1pHqDtJ9eSyfHU09qyyXUGT5u3iNxo/i0X46uqqvjnP//J+++/z4cffni9i9Mo13KC4O6DDGfejb6YUl1d7YaS1K2iooKJEycyZcoU9uzZ47Zcu91OZWUlFRUVeHl5uS3XZrNx5swZCgoKOHPmDOC+7WexWFi8eDF2ux1vb2+3tbeKigoeffRR3njjDU6dOuWWTPjXv9tms7m1juH8SfiTJ09y9uxZKisr3ZbrLLM7M515qampOBwOvLy83LpPmzoxXF5ezhNPPMHcuXM5d+6c23IrKiq4//77eeqpp/ju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qlWrjNraWre6N35+L1++bOzYscP1dmVlpTFhwgTDbrcbv/zlL92e1ZPuihUrPOp60l61apVx8uRJIyEhwSgpKfFaNzU11ZR5Pe221L569arx0EMPGXa73Vi+fLlhGIZRX1/fIbsttW9c51/84hduNz3prly5sl10G+Tn5xt2u9145ZVXDMMwjKysLMNutxsDBw40Bg4caOTm5rqu63Q620Xbat1btSMjI40BAwYYBQUFHvXashsZGWls3769XXWtOHNHW4vBgwcbOTk5ruteu3atzbu3ag8cONCIjIw0du7c6VHPnZkHDBhgvP/++67ruvs7qra21khPTzdGjhxp2O12Y86cOa73Xb161Xj22WcNu91uPPPMMx7N2tbd+fPne9R1p/3DH/7QsNvtxoIFCyzRbWotvP11YdbM7aVrxZnbw1o8//zzHbprxZlZi8+cO3fO1RwxYoQxfPhw12Mf//3vf42XXnrJsNvtxve+97120bXizKyF+V1P2rNmzerQ3bac+cUXXzTsdrsxd+5cU+f15HEAd9szZ850fYw79w/bei2+//3ve9Rt4HA4XP++d99914iMjDSefvpp1993Df//+OOPje9+97vG8ePHO2TXnfann37qdsuTbl1dXau6QEfh0/J2PTzRpUsX/ehHP7rtV8R706OPPqoHH3zQ9erxxYsXa8iQISotLdWGDRuUkZGh6upq+fr6ytfXV/7+/q7Dh9xOOysrS+vXr1dVVZV69eql6Oho9evXT4GBgbc987p161RVVaW+fftq+PDhGj16dLOv6mgQExOjxx9/XJJc51Spra2VJNehK3/yk5/o9ddf1/bt2xs9y6wl7rZ/97vfafv27aqvr7dE18y1SEtLU05OjmpqatzqNnx+nU6n7r77bsXHx7tuIyAgQN/+9rclye018LTbGu62q6ur1a9fP/3hD39o9rzrre02MAyjzbottbt166ZJkyZJkutVvu5+zVmt21L7xnV2Op1uNz3p3vg9582vC0+7DWJiYnT33Xfr7NmzkqT//Oc/kq5/L9fX12v37t26dOmSpM+OQtPWbat1b9V2OBxyOp16//339eGHH0ryzufPzK7D4VBhYaE++ugjt3tmd604c0dbi7q6Ou3Zs8f19dbS+dw/j+6t2vX19XI4HCooKDDley8/P9/VdffnxV133aWJEycqMjJSQUFBrlM4Nfzumzp1qke99tL15He0u+1p06ZJUqPzNLbnblNr4e66uNs2a+b20rXizO1hLT799FPXx7jzM85qXSvOzFp8Jjw8XCkpKfL391dFRYX8/Px08OBBVVVVKSgoSImJierUqZNHv5/N7FpxZtbC/K4n7Y7ebcuZn3zySfn6+jb6OWTGvJ7cX3a3fWPTnfuHbb0WrX3sqVOnTq5/n91uV2hoqHbu3Knf//73kq7/nedwOBQcHKw1a9bIbrd3yK47bT8/P48fk3Sn27lz51b9jAM6Cs4Zb4LWPOBjppCQEI0bN07BwcFyOp0KDQ1VRESESkpKdOLECV28eFGVlZWKiopq8XC3n1fbjO6Ndy4a7sjk5+fr5MmTGjZsmLZt26asrCx1795dq1evbvYQN59n22pdT9tr1qzxqH1j32az6ciRIwoNDZXNZtPatWt15swZTZgwQUOHDm102oG27LrTfuihhxQdHS0/Pz+vdq24Fu1tZtbC3G7DdXNyclRaWqp//vOfys7OVkhIiBISElRUVKRDhw5p9uzZzZ6v7PNuW63rSfupp55SQECA1z9/ZnWtuMbtZeaOvBYNX29t3XW3XVxcbMr3SGu60vVTZI0cOVJ9+/bVlClTVFtb6zqd0+uvv66SkhKNGjVKsbGxktx/QNBqXSvOzFqwFqwFa9HWXSvO3KtXL/Xo0UOFhYWqqKjQpUuXXKeCWrt2rY4dO6bhw4dr7Nixstlsbd614sysBWtxJ63FiBEjWAuT16I13f/XvXt3hYWFaevWrTp27Jj69u2r++67z7Wn4+kTsK3avVW7tWtrdhewMpvB01HuKDdukhw+fFgrVqzQvn37ZLfbtXbt2hbPf9kWbTNnXrhwof7617+qa9euqqmp0Re/+EVlZGR45cgGZrWt1jWrvXv3bi1dulTBwcFyOBw6cuSIvvSlL2n9+vXq2bNnu+tacWbWwvyuFWc2o7tq1SqtXr1aTqdTISEhSk1N1bBhw7RhwwYNGTLEo2f4fl5tq3WtOLPVulacmbUwv2vVmaXrRzZatmyZ/vWvf6m+vl7nzp1TWFiY3n777WbPP98Ru1acmbUwv2vFmVkL87tWnJm1uH5Ume3bt2vJkiWqrKxUp06d5Ofnp5qaGoWEhCgjI8N1Tt720LXizKyF+V0rzsxamN+14sxmroX02T5DVVWVUlJStGnTJkVERLiOynundK06M2BlvDL+DnPjs4969Oihfv366cMPP1RycrLHr1D+vNpmdBt+KRQVFengwYNyOBxe23w2q221rplt+uoX9gAACchJREFUh8Oh06dPa/PmzTp//rxqamo0YMAApaWl3dYdMrO6VpyZtTC/a8WZzeqGhYUpJydHXbt21auvvqoRI0ZIkgYNGqSQkJBWd81sW61rxZmt1rXizKyF+V2rzmwYhsrKyvTrX/9apaWlstlsGjhwoNLS0tS7d+87pmvFmVkL87tWnJm1ML9rxZlZi+t8fHx0//33Kz4+XpcvX5bNZlNAQIAeeOABvfbaa+2ua8WZWQvzu1acmbUwv2vFmc1cC+mzfQY/Pz91795dhw8fVmlpqZ5++ml169btjuladWbAynhlPFRXV+fx4bHbuu2tbnFxsR577DF16dJF77zzjldeBW5222pdM9unTp3S2bNnFRwcrF69eik4OLhdd81sW61rZttqXTPbVuqeOnVKVVVVioqKcp1DyluHrzKrbbWumW265ret1jWzbbWumW0zZ5akixcv6tKlS+ratavCwsIUFBR0R3bNbFuta2bbal0z21brmtm2WtfMttW6ZrbN6tbV1am+vl5Op1O+vr6666672nXXzLbVuma2rdY1s221rpltq3XNbFute6P8/Hz179//to8GY/WumW0zZwashM143NFqa2uVmpqqRx991Kubz2a2rdY1uw0AAAAAAAAAgDtuPC3undw1s23mzIAVsRmPO57D4ZCvr6+l2lbrmt0GAAAAAAAAAAAA2hs24wEAAAAAAAAAAAAA8DKfth4AAAAAAAAAAAAAAICOhs14AAAAAAAAAAAAAAC8jM14AAAAAAAAAAAAAAC8jM14AAAAAAAAAAAAAAC8jM14AAAAAAAAAAAAAAC8jM14AAAAAIBH0tLSZLfbb/ovMjJSMTExSkxM1F/+8hdTZ7hw4YLsdrvmz5/f6PJDhw7p73//e4vXAwAAAAAAMJtvWw8AAAAAALCmcePGacCAAa63HQ6HPvnkE23ZskUvvviiTp8+rQULFphy24GBgfrBD36g++67z3VZQUGB5s2bp5deekmxsbHNXg8AAAAAAODzwGY8AAAAAKBVxo8fr2nTpt10+ezZszV16lS98cYbSkhI0Je//GWv33ZgYKCSkpIaXfbJJ5/I6XS2eD0AAAAAAIDP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\n",
      "text/plain": [
       "<Figure size 2880x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.colors as mcolors\n",
    "import matplotlib as mpl\n",
    "\n",
    "sns.set(font_scale=1.5)\n",
    "\n",
    "orders = ['R' ,'K', 'H', 'D', 'E', 'S', 'T', 'N', 'Q', 'C', 'G', 'P', 'A', 'V', 'I', 'L', 'M', 'F', 'Y', 'W',\n",
    "         '*',\n",
    "         ]\n",
    "\n",
    "plt.figure(figsize = (40,10))\n",
    "\n",
    "# Reindex data\n",
    "reindexed_data = heatmap_data_dmso.reindex(orders, axis=0)\n",
    "\n",
    "# Create a mask for NaN values\n",
    "mask = reindexed_data.isna()\n",
    "\n",
    "# Create a custom colormap for NaN values and another one for the actual data\n",
    "cmap_nan = mcolors.ListedColormap(['black'])\n",
    "cmap_data = plt.cm.RdBu_r\n",
    "\n",
    "# Plot NaN values with specific color\n",
    "sns.heatmap(reindexed_data, mask=~mask, cmap=cmap_nan, cbar=False)\n",
    "\n",
    "# Plot the rest of the data with the original colormap\n",
    "ax = sns.heatmap(reindexed_data, mask=mask, cmap=cmap_data, vmin=0, vmax=4, center=1)\n",
    "\n",
    "#plt.title('Interaction log(EC50)', fontsize = 30)\n",
    "plt.xlabel('Position', fontsize = 20, fontname='Arial')\n",
    "plt.ylabel('Mutation', fontsize = 20, fontname='Arial')\n",
    "plt.yticks(rotation=0)\n",
    "plt.xticks(rotation=45)\n",
    "\n",
    "# Make tick labels bold\n",
    "for label in plt.gca().get_yticklabels():\n",
    "    label.set_fontweight('bold')\n",
    "    label.set_fontname('Arial')\n",
    "    \n",
    "for label in plt.gca().get_xticklabels():\n",
    "    label.set_fontweight('bold')\n",
    "    label.set_fontname('Arial')\n",
    "    \n",
    "plt.tick_params(left=False, bottom=True) ## other options are right and top\n",
    "ax.vlines([4, 7, 10, 22, 41, 75], *ax.get_ylim(), linewidth=7, color = 'white')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2880x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.colors as mcolors\n",
    "import matplotlib as mpl\n",
    "\n",
    "sns.set(font_scale=1.5)\n",
    "\n",
    "orders = ['R' ,'K', 'H', 'D', 'E', 'S', 'T', 'N', 'Q', 'C', 'G', 'P', 'A', 'V', 'I', 'L', 'M', 'F', 'Y', 'W',\n",
    "         '*',\n",
    "         ]\n",
    "\n",
    "plt.figure(figsize = (40,10))\n",
    "\n",
    "# Reindex data\n",
    "reindexed_data = heatmap_data_vem.reindex(orders, axis=0)\n",
    "\n",
    "# Create a mask for NaN values\n",
    "mask = reindexed_data.isna()\n",
    "\n",
    "# Create a custom colormap for NaN values and another one for the actual data\n",
    "cmap_nan = mcolors.ListedColormap(['black'])\n",
    "cmap_data = plt.cm.RdBu_r\n",
    "\n",
    "# Plot NaN values with specific color\n",
    "sns.heatmap(reindexed_data, mask=~mask, cmap=cmap_nan, cbar=False)\n",
    "\n",
    "# Plot the rest of the data with the original colormap\n",
    "ax = sns.heatmap(reindexed_data, mask=mask, cmap=cmap_data, vmin=0, vmax=2, center=1)\n",
    "\n",
    "#plt.title('Interaction log(EC50)', fontsize = 30)\n",
    "plt.xlabel('Position', fontsize = 20, fontname='Arial')\n",
    "plt.ylabel('Mutation', fontsize = 20, fontname='Arial')\n",
    "plt.yticks(rotation=0)\n",
    "plt.xticks(rotation=45)\n",
    "\n",
    "# Make tick labels bold\n",
    "for label in plt.gca().get_yticklabels():\n",
    "    label.set_fontweight('bold')\n",
    "    label.set_fontname('Arial')\n",
    "    \n",
    "for label in plt.gca().get_xticklabels():\n",
    "    label.set_fontweight('bold')\n",
    "    label.set_fontname('Arial')\n",
    "    \n",
    "plt.tick_params(left=False, bottom=True) ## other options are right and top\n",
    "ax.vlines([4, 7, 10, 22, 41, 75], *ax.get_ylim(), linewidth=7, color = 'white')\n",
    "\n",
    "plt.savefig('CRAF Interaction Vemurafenib Heatmap.svg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2880x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.colors as mcolors\n",
    "import matplotlib as mpl\n",
    "\n",
    "sns.set(font_scale=1.5)\n",
    "\n",
    "orders = ['R' ,'K', 'H', 'D', 'E', 'S', 'T', 'N', 'Q', 'C', 'G', 'P', 'A', 'V', 'I', 'L', 'M', 'F', 'Y', 'W',\n",
    "         '*',\n",
    "         ]\n",
    "\n",
    "plt.figure(figsize = (40,10))\n",
    "\n",
    "# Reindex data\n",
    "reindexed_data = heatmap_data_lxh.reindex(orders, axis=0)\n",
    "\n",
    "# Create a mask for NaN values\n",
    "mask = reindexed_data.isna()\n",
    "\n",
    "# Create a custom colormap for NaN values and another one for the actual data\n",
    "cmap_nan = mcolors.ListedColormap(['black'])\n",
    "cmap_data = plt.cm.RdBu_r\n",
    "\n",
    "# Plot NaN values with specific color\n",
    "sns.heatmap(reindexed_data, mask=~mask, cmap=cmap_nan, cbar=False)\n",
    "\n",
    "# Plot the rest of the data with the original colormap\n",
    "ax = sns.heatmap(reindexed_data, mask=mask, cmap=cmap_data, vmin=0, vmax=2, center=1)\n",
    "\n",
    "#plt.title('Interaction log(EC50)', fontsize = 30)\n",
    "plt.xlabel('Position', fontsize = 20, fontname='Arial')\n",
    "plt.ylabel('Mutation', fontsize = 20, fontname='Arial')\n",
    "plt.yticks(rotation=0)\n",
    "plt.xticks(rotation=45)\n",
    "\n",
    "# Make tick labels bold\n",
    "for label in plt.gca().get_yticklabels():\n",
    "    label.set_fontweight('bold')\n",
    "    label.set_fontname('Arial')\n",
    "    \n",
    "for label in plt.gca().get_xticklabels():\n",
    "    label.set_fontweight('bold')\n",
    "    label.set_fontname('Arial')\n",
    "    \n",
    "plt.tick_params(left=False, bottom=True) ## other options are right and top\n",
    "ax.vlines([4, 7, 10, 22, 41, 75], *ax.get_ylim(), linewidth=7, color = 'white')\n",
    "\n",
    "plt.savefig('CRAF Interaction LXH254 Heatmap.svg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2880x108 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(font_scale=1.0)\n",
    "sns.set(style='white')\n",
    "\n",
    "#Include only variants with 4 or more barcodes\n",
    "heatmap_data = data[data['Number of Barcodes/AA Var'] != 0]\n",
    "heatmap_data = heatmap_data[heatmap_data['Number of Barcodes/AA Var'] != 1]\n",
    "heatmap_data = heatmap_data[heatmap_data['Number of Barcodes/AA Var'] != 2]\n",
    "heatmap_data = heatmap_data[heatmap_data['Number of Barcodes/AA Var'] != 3]\n",
    "\n",
    "#Remove BTK\n",
    "heatmap_data = heatmap_data[heatmap_data['AA Variant'] != 'BTK']\n",
    "\n",
    "#remove wild type data\n",
    "heatmap_data = heatmap_data[heatmap_data['Mutation'] != 'wild type or synon.']\n",
    "\n",
    "# Calculate the average values at each position\n",
    "avg_values = heatmap_data.groupby(['Position', 'Mutation'])['mean dmso, WT normalized, BC level'].mean().reset_index()\n",
    "avg_values = avg_values.groupby(['Position'])['mean dmso, WT normalized, BC level'].mean()\n",
    "\n",
    "# Define the desired order of columns\n",
    "desired_order = [\n",
    "                #8, \n",
    "                26, 80, 102, 189, 192, 211, 257, 258, 262, 294, 305, 318, 326, 332, 334, 341, 345, 347, 367, 385, 389, 443, 444, 447, 449, 453, 456, 462, 464, 466, 467, 468, 469, 471, 472, 485, 499, 501, 509, 518, 531, 539, 574, 581, 582, 584, 586, 587, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 614, 615, 616, 618, 636, 666, 671, 682, 695, 725, 726, 727, 735, 762]\n",
    "desired_order = [str(value) for value in desired_order]\n",
    "\n",
    "plt.figure(figsize = (40,1.5))\n",
    "\n",
    "#Plot the barplot\n",
    "sns.barplot(x=avg_values.index, y=avg_values.values, color='gray', alpha=0.7, \n",
    "            orient='v', \n",
    "            ci=None,\n",
    "            order = desired_order,\n",
    "            #width = 1.0,\n",
    "           )\n",
    "\n",
    "\n",
    "#Change ylimit\n",
    "plt.ylim(0.5, 4)\n",
    "\n",
    "plt.savefig('CRAF Interaction Bar Plot.svg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2880x108 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(font_scale=1.0)\n",
    "sns.set(style='white')\n",
    "\n",
    "#Include only variants with 4 or more barcodes\n",
    "heatmap_data = data[data['Number of Barcodes/AA Var'] != 0]\n",
    "heatmap_data = heatmap_data[heatmap_data['Number of Barcodes/AA Var'] != 1]\n",
    "heatmap_data = heatmap_data[heatmap_data['Number of Barcodes/AA Var'] != 2]\n",
    "heatmap_data = heatmap_data[heatmap_data['Number of Barcodes/AA Var'] != 3]\n",
    "\n",
    "#Remove BTK\n",
    "heatmap_data = heatmap_data[heatmap_data['AA Variant'] != 'BTK']\n",
    "\n",
    "#remove wild type data\n",
    "heatmap_data = heatmap_data[heatmap_data['Mutation'] != 'wild type or synon.']\n",
    "\n",
    "# Calculate the average values at each position\n",
    "avg_values = heatmap_data.groupby(['Position', 'Mutation'])['mean vem, WT normalized, BC level'].mean().reset_index()\n",
    "avg_values = avg_values.groupby(['Position'])['mean vem, WT normalized, BC level'].mean()\n",
    "\n",
    "# Define the desired order of columns\n",
    "desired_order = [\n",
    "                8, \n",
    "                26, 80, 102, 189, 192, 211, 257, 258, 262, 294, 305, 318, 326, 332, 334, 341, 345, 347, 367, 385, 389, 443, 444, 447, 449, 453, 456, 462, 464, 466, 467, 468, 469, 471, 472, 485, 499, 501, 509, 518, 531, 539, 574, 581, 582, 584, 586, 587, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 614, 615, 616, 618, 636, 666, 671, 682, 695, 725, 726, 727, 735, 762]\n",
    "desired_order = [str(value) for value in desired_order]\n",
    "\n",
    "plt.figure(figsize = (40,1.5))\n",
    "\n",
    "#Plot the barplot\n",
    "sns.barplot(x=avg_values.index, y=avg_values.values, color='gray', alpha=0.7, \n",
    "            orient='v', \n",
    "            ci=None,\n",
    "            order = desired_order,\n",
    "            #width = 1.0,\n",
    "           )\n",
    "\n",
    "\n",
    "#Change ylimit\n",
    "plt.ylim(0.5, 3)\n",
    "\n",
    "plt.savefig('CRAF Interaction Vemurafenib Bar Plot.svg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2880x108 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(font_scale=1.0)\n",
    "sns.set(style='white')\n",
    "\n",
    "#Include only variants with 4 or more barcodes\n",
    "heatmap_data = data[data['Number of Barcodes/AA Var'] != 0]\n",
    "heatmap_data = heatmap_data[heatmap_data['Number of Barcodes/AA Var'] != 1]\n",
    "heatmap_data = heatmap_data[heatmap_data['Number of Barcodes/AA Var'] != 2]\n",
    "heatmap_data = heatmap_data[heatmap_data['Number of Barcodes/AA Var'] != 3]\n",
    "\n",
    "#Remove BTK\n",
    "heatmap_data = heatmap_data[heatmap_data['AA Variant'] != 'BTK']\n",
    "\n",
    "#remove wild type data\n",
    "heatmap_data = heatmap_data[heatmap_data['Mutation'] != 'wild type or synon.']\n",
    "\n",
    "# Calculate the average values at each position\n",
    "avg_values = heatmap_data.groupby(['Position', 'Mutation'])['mean lxh, WT normalized, BC level'].mean().reset_index()\n",
    "avg_values = avg_values.groupby(['Position'])['mean lxh, WT normalized, BC level'].mean()\n",
    "\n",
    "# Define the desired order of columns\n",
    "desired_order = [\n",
    "                8, \n",
    "                26, 80, 102, 189, 192, 211, 257, 258, 262, 294, 305, 318, 326, 332, 334, 341, 345, 347, 367, 385, 389, 443, 444, 447, 449, 453, 456, 462, 464, 466, 467, 468, 469, 471, 472, 485, 499, 501, 509, 518, 531, 539, 574, 581, 582, 584, 586, 587, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 614, 615, 616, 618, 636, 666, 671, 682, 695, 725, 726, 727, 735, 762]\n",
    "desired_order = [str(value) for value in desired_order]\n",
    "\n",
    "plt.figure(figsize = (40,1.5))\n",
    "\n",
    "#Plot the barplot\n",
    "sns.barplot(x=avg_values.index, y=avg_values.values, color='gray', alpha=0.7, \n",
    "            orient='v', \n",
    "            ci=None,\n",
    "            order = desired_order,\n",
    "            #width = 1.0,\n",
    "           )\n",
    "\n",
    "\n",
    "#Change ylimit\n",
    "plt.ylim(0.5, 1.5)\n",
    "\n",
    "plt.savefig('CRAF Interaction LXH254 Bar Plot.svg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean +/- SEM = 3.5711985191828366+/-0.19056650157115876\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "dataset = 'dmso1, WT normalized, BC level'\n",
    "variant = 'Gly466Glu'\n",
    "\n",
    "select = data[data['Label'] == variant]\n",
    "std = select[dataset].std()\n",
    "n = len(select[dataset])\n",
    "sqrt_n = math.sqrt(n)\n",
    "SEM = std/sqrt_n\n",
    "print('Mean +/- SEM = ' + \n",
    "      str(select[dataset].mean()) + \n",
    "      '+/-' + \n",
    "      str(SEM)\n",
    "     )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# How many activating variants are classified as increased CRaf interactions?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Label</th>\n",
       "      <th>Score 1, WT normalized, Variant level</th>\n",
       "      <th>Score 2, WT normalized, Variant level</th>\n",
       "      <th>Averge Flag</th>\n",
       "      <th>Average Score</th>\n",
       "      <th>DMSO Classification_x</th>\n",
       "      <th>dmso1, WT normalized, Variant level</th>\n",
       "      <th>dmso2, WT normalized, Variant level</th>\n",
       "      <th>dmso_Average Score</th>\n",
       "      <th>DMSO Classification_y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ala305Gln</td>\n",
       "      <td>1.037706</td>\n",
       "      <td>1.207888</td>\n",
       "      <td>86.200000</td>\n",
       "      <td>1.122797</td>\n",
       "      <td>GOF</td>\n",
       "      <td>1.312961</td>\n",
       "      <td>1.102031</td>\n",
       "      <td>1.207496</td>\n",
       "      <td>GOF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Arg347Gln</td>\n",
       "      <td>1.413468</td>\n",
       "      <td>1.272113</td>\n",
       "      <td>61.600000</td>\n",
       "      <td>1.342790</td>\n",
       "      <td>GOF</td>\n",
       "      <td>1.398806</td>\n",
       "      <td>1.202205</td>\n",
       "      <td>1.300505</td>\n",
       "      <td>GOF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arg462Ala</td>\n",
       "      <td>1.287728</td>\n",
       "      <td>0.994297</td>\n",
       "      <td>75.062500</td>\n",
       "      <td>1.141013</td>\n",
       "      <td>GOF</td>\n",
       "      <td>1.455034</td>\n",
       "      <td>1.424419</td>\n",
       "      <td>1.439726</td>\n",
       "      <td>GOF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arg462Gly</td>\n",
       "      <td>1.636828</td>\n",
       "      <td>1.476855</td>\n",
       "      <td>85.142857</td>\n",
       "      <td>1.556841</td>\n",
       "      <td>GOF</td>\n",
       "      <td>1.466658</td>\n",
       "      <td>1.224945</td>\n",
       "      <td>1.345801</td>\n",
       "      <td>GOF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Arg462Phe</td>\n",
       "      <td>1.267910</td>\n",
       "      <td>1.173426</td>\n",
       "      <td>65.145833</td>\n",
       "      <td>1.220668</td>\n",
       "      <td>GOF</td>\n",
       "      <td>1.236157</td>\n",
       "      <td>1.302316</td>\n",
       "      <td>1.269236</td>\n",
       "      <td>GOF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>401</th>\n",
       "      <td>Val600Pro</td>\n",
       "      <td>1.609701</td>\n",
       "      <td>1.612359</td>\n",
       "      <td>93.843750</td>\n",
       "      <td>1.611030</td>\n",
       "      <td>GOF</td>\n",
       "      <td>2.137086</td>\n",
       "      <td>1.973778</td>\n",
       "      <td>2.055432</td>\n",
       "      <td>GOF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>402</th>\n",
       "      <td>Val600Ser</td>\n",
       "      <td>1.973615</td>\n",
       "      <td>1.738053</td>\n",
       "      <td>77.931034</td>\n",
       "      <td>1.855834</td>\n",
       "      <td>GOF</td>\n",
       "      <td>1.869255</td>\n",
       "      <td>1.730948</td>\n",
       "      <td>1.800101</td>\n",
       "      <td>GOF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>403</th>\n",
       "      <td>Val600Thr</td>\n",
       "      <td>1.940321</td>\n",
       "      <td>1.596814</td>\n",
       "      <td>87.482143</td>\n",
       "      <td>1.768567</td>\n",
       "      <td>GOF</td>\n",
       "      <td>1.894330</td>\n",
       "      <td>1.986610</td>\n",
       "      <td>1.940470</td>\n",
       "      <td>GOF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>404</th>\n",
       "      <td>Val600Trp</td>\n",
       "      <td>1.458988</td>\n",
       "      <td>1.387623</td>\n",
       "      <td>95.902439</td>\n",
       "      <td>1.423305</td>\n",
       "      <td>GOF</td>\n",
       "      <td>2.021591</td>\n",
       "      <td>1.615832</td>\n",
       "      <td>1.818712</td>\n",
       "      <td>GOF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>405</th>\n",
       "      <td>Val600Tyr</td>\n",
       "      <td>2.245811</td>\n",
       "      <td>2.023244</td>\n",
       "      <td>80.206897</td>\n",
       "      <td>2.134528</td>\n",
       "      <td>GOF</td>\n",
       "      <td>1.954136</td>\n",
       "      <td>1.809232</td>\n",
       "      <td>1.881684</td>\n",
       "      <td>GOF</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>406 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Label  Score 1, WT normalized, Variant level  \\\n",
       "0    Ala305Gln                               1.037706   \n",
       "1    Arg347Gln                               1.413468   \n",
       "2    Arg462Ala                               1.287728   \n",
       "3    Arg462Gly                               1.636828   \n",
       "4    Arg462Phe                               1.267910   \n",
       "..         ...                                    ...   \n",
       "401  Val600Pro                               1.609701   \n",
       "402  Val600Ser                               1.973615   \n",
       "403  Val600Thr                               1.940321   \n",
       "404  Val600Trp                               1.458988   \n",
       "405  Val600Tyr                               2.245811   \n",
       "\n",
       "     Score 2, WT normalized, Variant level  Averge Flag  Average Score  \\\n",
       "0                                 1.207888    86.200000       1.122797   \n",
       "1                                 1.272113    61.600000       1.342790   \n",
       "2                                 0.994297    75.062500       1.141013   \n",
       "3                                 1.476855    85.142857       1.556841   \n",
       "4                                 1.173426    65.145833       1.220668   \n",
       "..                                     ...          ...            ...   \n",
       "401                               1.612359    93.843750       1.611030   \n",
       "402                               1.738053    77.931034       1.855834   \n",
       "403                               1.596814    87.482143       1.768567   \n",
       "404                               1.387623    95.902439       1.423305   \n",
       "405                               2.023244    80.206897       2.134528   \n",
       "\n",
       "    DMSO Classification_x  dmso1, WT normalized, Variant level  \\\n",
       "0                     GOF                             1.312961   \n",
       "1                     GOF                             1.398806   \n",
       "2                     GOF                             1.455034   \n",
       "3                     GOF                             1.466658   \n",
       "4                     GOF                             1.236157   \n",
       "..                    ...                                  ...   \n",
       "401                   GOF                             2.137086   \n",
       "402                   GOF                             1.869255   \n",
       "403                   GOF                             1.894330   \n",
       "404                   GOF                             2.021591   \n",
       "405                   GOF                             1.954136   \n",
       "\n",
       "     dmso2, WT normalized, Variant level  dmso_Average Score  \\\n",
       "0                               1.102031            1.207496   \n",
       "1                               1.202205            1.300505   \n",
       "2                               1.424419            1.439726   \n",
       "3                               1.224945            1.345801   \n",
       "4                               1.302316            1.269236   \n",
       "..                                   ...                 ...   \n",
       "401                             1.973778            2.055432   \n",
       "402                             1.730948            1.800101   \n",
       "403                             1.986610            1.940470   \n",
       "404                             1.615832            1.818712   \n",
       "405                             1.809232            1.881684   \n",
       "\n",
       "    DMSO Classification_y  \n",
       "0                     GOF  \n",
       "1                     GOF  \n",
       "2                     GOF  \n",
       "3                     GOF  \n",
       "4                     GOF  \n",
       "..                    ...  \n",
       "401                   GOF  \n",
       "402                   GOF  \n",
       "403                   GOF  \n",
       "404                   GOF  \n",
       "405                   GOF  \n",
       "\n",
       "[406 rows x 10 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "activity_data = pd.read_csv('/Users/jsimon/RNAbinder_CODE_FOR_PAPER/Activity with CRAF_Expeirment 1.tsv', sep='\\t')\n",
    "activity_data = activity_data[activity_data['DMSO Classification'] == 'GOF']\n",
    "\n",
    "interaction_data = Replicate_score_data[Replicate_score_data['DMSO Classification'] == 'GOF'].reset_index()\n",
    "\n",
    "GOFactivity_GOFinteraction = interaction_data.merge(activity_data, on='Label')\n",
    "\n",
    "GOFactivity_GOFinteraction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
